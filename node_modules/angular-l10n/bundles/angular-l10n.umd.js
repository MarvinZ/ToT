(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/http'), require('rxjs/Observable'), require('rxjs/add/operator/map'), require('rxjs/add/observable/merge'), require('@angular/common'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/http', 'rxjs/Observable', 'rxjs/add/operator/map', 'rxjs/add/observable/merge', '@angular/common', '@angular/forms'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.l10n = global.ng.l10n || {}),global.ng.core,global.ng.http,global.Rx,global.Rx,global.Rx,global.ng.common,global.ng.forms));
}(this, (function (exports,_angular_core,_angular_http,rxjs_Observable,rxjs_add_operator_map,rxjs_add_observable_merge,_angular_common,_angular_forms) { 'use strict';

var LocaleConfig = (function () {
    /**
     * @param {?} locale
     */
    function LocaleConfig(locale) {
        this.locale = locale;
    }
    /**
     * Adds a language to use in the app, specifying the layout direction.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param textDirection Default is ltr (left to right)
     * @param {?} languageCode
     * @param {?=} textDirection
     * @return {?}
     */
    LocaleConfig.prototype.AddLanguage = function (languageCode, textDirection) {
        if (textDirection === void 0) { textDirection = "LTR"; }
        var /** @type {?} */ language = { code: languageCode, direction: textDirection };
        this.locale.configuration.languageCodes.push(language);
        return this;
    };
    /**
     * Adds the languages to use in the app.
    \@param languageCodes Array of ISO 639 two-letter or three-letter codes of the languages
     * @param {?} languageCodes
     * @return {?}
     */
    LocaleConfig.prototype.AddLanguages = function (languageCodes) {
        for (var _i = 0, languageCodes_1 = languageCodes; _i < languageCodes_1.length; _i++) {
            var languageCode = languageCodes_1[_i];
            var /** @type {?} */ language = { code: languageCode, direction: "ltr" };
            this.locale.configuration.languageCodes.push(language);
        }
        return this;
    };
    /**
     * Disables the browser storage for language, default locale & currency.
     * @return {?}
     */
    LocaleConfig.prototype.DisableStorage = function () {
        this.locale.configuration.storageIsDisabled = true;
        return this;
    };
    /**
     * If the cookie expiration is omitted, the cookie becomes a session cookie.
     * @param {?=} days
     * @return {?}
     */
    LocaleConfig.prototype.SetCookieExpiration = function (days) {
        if (days === void 0) { days = null; }
        this.locale.configuration.cookiesExpirationDays = days;
        return this;
    };
    /**
     * Sets browser LocalStorage as default for language, default locale & currency.
     * @return {?}
     */
    LocaleConfig.prototype.UseLocalStorage = function () {
        this.locale.configuration.localStorage = true;
        return this;
    };
    /**
     * Defines the language to be used:
     - tries to get the language from the browser storage;
     - tries to get the language of the browser if it has been added;
     - otherwise gets the parameter language.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
     * @param {?} languageCode
     * @return {?}
     */
    LocaleConfig.prototype.DefineLanguage = function (languageCode) {
        this.locale.configuration.languageCode = languageCode;
        return this;
    };
    /**
     * Defines the default locale to be used, regardless of the browser language.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param countryCode ISO 3166 two-letter, uppercase code of the country
    \@param scriptCode Optional ISO 15924 four-letter script code
    \@param numberingSystem Optional numbering system
    \@param calendar Optional calendar
     * @param {?} languageCode
     * @param {?} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleConfig.prototype.DefineDefaultLocale = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        this.locale.configuration.languageCode = languageCode;
        this.locale.configuration.countryCode = countryCode;
        this.locale.configuration.scriptCode = scriptCode;
        this.locale.configuration.numberingSystem = numberingSystem;
        this.locale.configuration.calendar = calendar;
        return this;
    };
    /**
     * Defines the currency to be used.
    \@param defaultCurrency ISO 4217 three-letter code of the currency
     * @param {?} currencyCode
     * @return {?}
     */
    LocaleConfig.prototype.DefineCurrency = function (currencyCode) {
        this.locale.configuration.currencyCode = currencyCode;
        return this;
    };
    return LocaleConfig;
}());

var DefaultLocaleCodes = (function () {
    function DefaultLocaleCodes() {
    }
    return DefaultLocaleCodes;
}());

var __extends$1 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Codes = (function (_super) {
    __extends$1(Codes, _super);
    function Codes() {
        _super.apply(this, arguments);
    }
    return Codes;
}(DefaultLocaleCodes));

var __extends = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Config = (function (_super) {
    __extends(Config, _super);
    function Config() {
        _super.apply(this, arguments);
        this.languageCodes = [];
        this.storageIsDisabled = false;
        this.localStorage = false;
    }
    return Config;
}(Codes));

var __extends$2 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DefaultLocale = (function (_super) {
    __extends$2(DefaultLocale, _super);
    function DefaultLocale() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(DefaultLocale.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} defaultLocale
         * @return {?}
         */
        set: function (defaultLocale) {
            this._value = defaultLocale;
            this.parseValue();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} languageCode
     * @param {?=} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    DefaultLocale.prototype.build = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        this.languageCode = languageCode;
        this.scriptCode = scriptCode;
        this.countryCode = countryCode;
        this.numberingSystem = numberingSystem;
        this.calendar = calendar;
        var /** @type {?} */ value = [];
        value.push(languageCode);
        value.push(!!scriptCode ? "-" + scriptCode : "");
        value.push(!!countryCode ? "-" + countryCode : "");
        // Adds the 'u' (Unicode) extension.
        value.push((!!numberingSystem || !!calendar) ? "-u" : "");
        value.push(!!numberingSystem ? "-nu-" + numberingSystem : "");
        value.push(!!calendar ? "-ca-" + calendar : "");
        this._value = value.join("");
    };
    /**
     * @return {?}
     */
    DefaultLocale.prototype.parseValue = function () {
        if (!!this.value) {
            var /** @type {?} */ value = this.value;
            // Looks for the 'u' (Unicode) extension.
            var /** @type {?} */ index = value.search("-u");
            if (index != -1) {
                var /** @type {?} */ extensions = value.substring(index + 1).split("-");
                switch (extensions.length) {
                    case 3:
                        if (extensions[1] == "nu") {
                            this.numberingSystem = extensions[2];
                        }
                        else if (extensions[1] == "ca") {
                            this.calendar = extensions[2];
                        }
                        break;
                    default:
                        this.numberingSystem = extensions[2];
                        this.calendar = extensions[4];
                        break;
                }
                // Extracts the codes.
                value = value.substring(0, index);
            }
            var /** @type {?} */ codes = value.split("-");
            switch (codes.length) {
                case 1:
                    this.languageCode = codes[0];
                    break;
                case 2:
                    this.languageCode = codes[0];
                    this.countryCode = codes[1];
                    break;
                default:
                    this.languageCode = codes[0];
                    this.scriptCode = codes[1];
                    this.countryCode = codes[2];
                    break;
            }
        }
    };
    return DefaultLocale;
}(DefaultLocaleCodes));

/**
 * Manages the browser for storage, navigator and Intl.
 */
var Browser = (function () {
    /**
     * @param {?} locale
     */
    function Browser(locale) {
        this.locale = locale;
        this.hasCookie = typeof navigator.cookieEnabled !== "undefined" && navigator.cookieEnabled;
        this.hasLocalStorage = typeof Storage !== "undefined";
    }
    /**
     * @param {?} name
     * @return {?}
     */
    Browser.prototype.readStorage = function (name) {
        var /** @type {?} */ value;
        if (!this.storageIsDisabled) {
            if (this.locale.configuration.localStorage && this.hasLocalStorage) {
                value = this.getLocalStorage(name);
            }
            else if (this.hasCookie) {
                value = this.getCookie(name);
            }
        }
        return value;
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Browser.prototype.writeStorage = function (name, value) {
        if (!this.storageIsDisabled) {
            if (this.locale.configuration.localStorage && this.hasLocalStorage) {
                this.setLocalStorage(name, value);
            }
            else if (this.hasCookie) {
                this.setCookie(name, value);
            }
        }
    };
    /**
     * @return {?}
     */
    Browser.prototype.getBrowserLanguage = function () {
        var /** @type {?} */ browserLanguage;
        if (typeof navigator.language !== "undefined") {
            browserLanguage = navigator.language;
        }
        if (browserLanguage != null) {
            var /** @type {?} */ index = browserLanguage.indexOf("-");
            if (index != -1) {
                browserLanguage = browserLanguage.substring(0, index);
            }
        }
        return browserLanguage;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Browser.prototype.getLocalStorage = function (name) {
        return localStorage.getItem(name);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Browser.prototype.getCookie = function (name) {
        var /** @type {?} */ result = new RegExp("(?:^|; )" +
            encodeURIComponent(name) +
            "=([^;]*)").exec(document.cookie);
        return result ? result[1] : null;
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Browser.prototype.setLocalStorage = function (name, value) {
        localStorage.setItem(name, value);
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Browser.prototype.setCookie = function (name, value) {
        var /** @type {?} */ expires = "";
        if (this.locale.configuration.cookiesExpirationDays != null) {
            var /** @type {?} */ expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() +
                (this.locale.configuration.cookiesExpirationDays * 24 * 60 * 60 * 1000));
            expires = "; expires=" + expirationDate.toUTCString();
        }
        document.cookie = name + "=" + value + expires + "; path=/";
    };
    return Browser;
}());

/**
 * Manages language, default locale & currency.
 */
var LocaleService = (function () {
    function LocaleService() {
        this.languageCodeChanged = new _angular_core.EventEmitter(true);
        this.defaultLocaleChanged = new _angular_core.EventEmitter(true);
        this.currencyCodeChanged = new _angular_core.EventEmitter(true);
        this.loadTranslation = new _angular_core.EventEmitter(true);
        this._configuration = new Config();
        this.defaultLocale = new DefaultLocale();
        this.browser = new Browser(this);
        LocaleService.referenceCounter++;
    }
    Object.defineProperty(LocaleService.prototype, "configuration", {
        /**
         * @return {?}
         */
        get: function () {
            return this._configuration;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Configure the service in the application root module or bootstrap component.
     * @return {?}
     */
    LocaleService.prototype.AddConfiguration = function () {
        return new LocaleConfig(this);
    };
    /**
     * Call this method after the configuration to initialize the service.
     * @return {?}
     */
    LocaleService.prototype.init = function () {
        this.initStorage();
        if (!!this.configuration.languageCode && !!this.configuration.countryCode) {
            this.initDefaultLocale();
        }
        else if (!!this.configuration.languageCode) {
            this.initLanguage();
        }
        if (!!this.configuration.currencyCode) {
            this.initCurrency();
        }
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getAvailableLanguages = function () {
        return this.configuration.languageCodes.map(function (language) { return language.code; });
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.getLanguageDirection = function (languageCode) {
        var /** @type {?} */ matchedLanguages = this.matchLanguage(languageCode);
        return matchedLanguages[0].direction;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentLanguage = function () {
        return this.defaultLocale.languageCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCountry = function () {
        return this.defaultLocale.countryCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentScript = function () {
        return this.defaultLocale.scriptCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentNumberingSystem = function () {
        return this.defaultLocale.numberingSystem;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCalendar = function () {
        return this.defaultLocale.calendar;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getDefaultLocale = function () {
        return this.defaultLocale.value;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCurrency = function () {
        return this.currencyCode;
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.setCurrentLanguage = function (languageCode) {
        if (this.defaultLocale.languageCode != languageCode) {
            this.defaultLocale.build(languageCode);
            this.browser.writeStorage("locale", this.defaultLocale.value);
            this.sendLanguageEvents();
            this.sendTranslationEvents();
        }
    };
    /**
     * @param {?} languageCode
     * @param {?} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleService.prototype.setDefaultLocale = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        if (this.defaultLocale.languageCode != languageCode ||
            this.defaultLocale.countryCode != countryCode ||
            this.defaultLocale.scriptCode != scriptCode ||
            this.defaultLocale.numberingSystem != numberingSystem ||
            this.defaultLocale.calendar != calendar) {
            this.defaultLocale.build(languageCode, countryCode, scriptCode, numberingSystem, calendar);
            this.browser.writeStorage("locale", this.defaultLocale.value);
            this.sendDefaultLocaleEvents();
            this.sendTranslationEvents();
        }
    };
    /**
     * @param {?} currencyCode
     * @return {?}
     */
    LocaleService.prototype.setCurrentCurrency = function (currencyCode) {
        if (this.currencyCode != currencyCode) {
            this.currencyCode = currencyCode;
            this.browser.writeStorage("currency", this.currencyCode);
            this.sendCurrencyEvents();
        }
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initStorage = function () {
        // Avoids overwriting of the storage.
        if (LocaleService.referenceCounter > 1) {
            this.browser.storageIsDisabled = true;
        }
        else {
            this.browser.storageIsDisabled = this.configuration.storageIsDisabled;
        }
        // Tries to retrieve default locale & currency from the browser storage.
        this.defaultLocale.value = this.browser.readStorage("locale");
        this.currencyCode = this.browser.readStorage("currency");
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initLanguage = function () {
        if (this.defaultLocale.languageCode == null) {
            var /** @type {?} */ browserLanguage = this.browser.getBrowserLanguage();
            var /** @type {?} */ matchedLanguages = this.matchLanguage(browserLanguage);
            if (matchedLanguages.length > 0) {
                this.defaultLocale.build(browserLanguage);
            }
            else {
                this.defaultLocale.build(this.configuration.languageCode);
            }
            this.browser.writeStorage("locale", this.defaultLocale.value);
        }
        this.sendLanguageEvents();
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.matchLanguage = function (languageCode) {
        var /** @type {?} */ matchedLanguages = this.configuration.languageCodes.filter(function (language) {
            return language.code == languageCode;
        });
        return matchedLanguages;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initDefaultLocale = function () {
        if (this.defaultLocale.value == null) {
            this.defaultLocale.build(this.configuration.languageCode, this.configuration.countryCode, this.configuration.scriptCode, this.configuration.numberingSystem, this.configuration.calendar);
            this.browser.writeStorage("locale", this.defaultLocale.value);
        }
        this.sendDefaultLocaleEvents();
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initCurrency = function () {
        if (this.currencyCode == null) {
            this.currencyCode = this.configuration.currencyCode;
            this.browser.writeStorage("currency", this.currencyCode);
        }
        this.sendCurrencyEvents();
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendLanguageEvents = function () {
        this.languageCodeChanged.emit(this.defaultLocale.languageCode);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendDefaultLocaleEvents = function () {
        this.defaultLocaleChanged.emit(this.defaultLocale.value);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendCurrencyEvents = function () {
        this.currencyCodeChanged.emit(this.currencyCode);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendTranslationEvents = function () {
        // This event is subscribed by TranslationService to load the translation data.
        this.loadTranslation.emit(null);
    };
    LocaleService.referenceCounter = 0;
    LocaleService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    LocaleService.ctorParameters = function () { return []; };
    LocaleService.propDecorators = {
        'languageCodeChanged': [{ type: _angular_core.Output },],
        'defaultLocaleChanged': [{ type: _angular_core.Output },],
        'currencyCodeChanged': [{ type: _angular_core.Output },],
        'loadTranslation': [{ type: _angular_core.Output },],
    };
    return LocaleService;
}());

/**
 * Provides the methods to check if Intl APIs are supported.
 */
var IntlAPI = (function () {
    function IntlAPI() {
    }
    /**
     * @return {?}
     */
    IntlAPI.HasDateTimeFormat = function () {
        var /** @type {?} */ hasIntl = (Intl && typeof Intl === "object");
        return hasIntl && Intl.hasOwnProperty("DateTimeFormat");
    };
    /**
     * @return {?}
     */
    IntlAPI.HasNumberFormat = function () {
        var /** @type {?} */ hasIntl = (Intl && typeof Intl === "object");
        return hasIntl && Intl.hasOwnProperty("NumberFormat");
    };
    /**
     * @return {?}
     */
    IntlAPI.HasCollator = function () {
        var /** @type {?} */ hasIntl = (Intl && typeof Intl === "object");
        return hasIntl && Intl.hasOwnProperty("Collator");
    };
    return IntlAPI;
}());

var TranslationConfig = (function () {
    /**
     * @param {?} translation
     */
    function TranslationConfig(translation) {
        this.translation = translation;
    }
    /**
     * Direct loading: adds translation data.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param translation Translation data of the language
     * @param {?} languageCode
     * @param {?} translation
     * @return {?}
     */
    TranslationConfig.prototype.AddTranslation = function (languageCode, translation) {
        this.translation.configuration.translationData[languageCode] = translation;
        return this;
    };
    /**
     * Asynchronous loading: adds a translation provider.
    \@param prefix The path prefix of the json files
    \@param dataFormat Data format: default & supported value is 'json'
    \@param webAPI True if the asynchronous loading uses a Web API to get the data
     * @param {?} prefix
     * @param {?=} dataFormat
     * @param {?=} webAPI
     * @return {?}
     */
    TranslationConfig.prototype.AddProvider = function (prefix, dataFormat, webAPI) {
        if (dataFormat === void 0) { dataFormat = "json"; }
        if (webAPI === void 0) { webAPI = false; }
        this.translation.configuration.providers.push({ prefix: prefix, dataFormat: dataFormat, webAPI: webAPI });
        return this;
    };
    /**
     * Sets the use of locale (languageCode-countryCode) as language.
     * @return {?}
     */
    TranslationConfig.prototype.UseLocaleAsLanguage = function () {
        this.translation.configuration.localeAsLanguage = true;
        return this;
    };
    /**
     * Sets the value to use for missing keys.
     * @param {?} value
     * @return {?}
     */
    TranslationConfig.prototype.SetMissingValue = function (value) {
        this.translation.configuration.missingValue = value;
        return this;
    };
    /**
     * Sets the key to use for missing keys.
     * @param {?} key
     * @return {?}
     */
    TranslationConfig.prototype.SetMissingKey = function (key) {
        this.translation.configuration.missingKey = key;
        return this;
    };
    /**
     * Sets composed key separator. Default is the point '.'.
     * @param {?} keySeparator
     * @return {?}
     */
    TranslationConfig.prototype.SetComposedKeySeparator = function (keySeparator) {
        this.translation.configuration.keySeparator = keySeparator;
        return this;
    };
    return TranslationConfig;
}());

var Config$1 = (function () {
    function Config() {
        this.translationData = {};
        this.providers = [];
        this.localeAsLanguage = false;
        this.keySeparator = ".";
    }
    return Config;
}());

var LoadingMode = {};
LoadingMode.Direct = 0;
LoadingMode.Async = 1;
LoadingMode[LoadingMode.Direct] = "Direct";
LoadingMode[LoadingMode.Async] = "Async";

var ServiceState = {};
ServiceState.isReady = 0;
ServiceState.isLoading = 1;
ServiceState.isWaiting = 2;
ServiceState[ServiceState.isReady] = "isReady";
ServiceState[ServiceState.isLoading] = "isLoading";
ServiceState[ServiceState.isWaiting] = "isWaiting";

/**
 * Manages the translation data.
 */
var TranslationService = (function () {
    /**
     * @param {?} locale
     * @param {?} http
     */
    function TranslationService(locale, http) {
        var _this = this;
        this.locale = locale;
        this.http = http;
        this.translationChanged = new _angular_core.EventEmitter(true);
        this._configuration = new Config$1();
        this.translationData = {};
        this.serviceState = ServiceState.isWaiting;
        // When the language changes, loads translation data.
        this.locale.loadTranslation.subscribe(function () { _this.loadTranslation(); });
    }
    Object.defineProperty(TranslationService.prototype, "configuration", {
        /**
         * @return {?}
         */
        get: function () {
            return this._configuration;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Configure the service in the application root module or bootstrap component.
     * @return {?}
     */
    TranslationService.prototype.AddConfiguration = function () {
        return new TranslationConfig(this);
    };
    /**
     * Call this method after the configuration to initialize the service.
     * @return {?}
     */
    TranslationService.prototype.init = function () {
        if (this.configuration.providers.length > 0) {
            this.loadingMode = LoadingMode.Async;
        }
        else {
            this.translationData = this.configuration.translationData;
            this.loadingMode = LoadingMode.Direct;
        }
        this.loadTranslation();
    };
    /**
     * The language of the translation service is updated when the translation data has been loaded.
     * @return {?}
     */
    TranslationService.prototype.getLanguage = function () {
        return this.language;
    };
    /**
     * @param {?} key
     * @param {?=} args
     * @param {?=} lang
     * @return {?}
     */
    TranslationService.prototype.translate = function (key, args, lang) {
        if (args === void 0) { args = null; }
        if (lang === void 0) { lang = this.language; }
        // I18n plural.
        if (/^\d+\b/.exec(key)) {
            return this.translateI18nPlural(key, args, lang);
        }
        return this.getValue(key, args, lang);
    };
    /**
     * @param {?} key
     * @param {?=} args
     * @param {?=} lang
     * @return {?}
     */
    TranslationService.prototype.translateAsync = function (key, args, lang) {
        var _this = this;
        if (lang === void 0) { lang = this.language; }
        return rxjs_Observable.Observable.create(function (observer) {
            var /** @type {?} */ value = _this.translate(key, args, lang);
            observer.next(value);
            observer.complete();
        });
    };
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.translateI18nPlural = function (key, args, lang) {
        var /** @type {?} */ keyText = key.replace(/^\d+\b/, "");
        keyText = keyText.trim();
        var /** @type {?} */ keyNumber = parseFloat(key);
        key = key.replace(/^\d+/, this.translateNumber(keyNumber));
        return key.replace(keyText, this.getValue(keyText, args, lang));
    };
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.getValue = function (key, args, lang) {
        var /** @type {?} */ value;
        if (this.translationData[lang]) {
            var /** @type {?} */ translation = this.translationData[lang];
            // Composed key.
            var /** @type {?} */ keys = key.split(this.configuration.keySeparator);
            do {
                key = keys.shift();
                if (translation[key] && typeof translation[key] === "object") {
                    translation = translation[key];
                }
            } while (keys.length > 0);
            value = translation[key];
        }
        return this.parseValue(key, value, args, lang);
    };
    /**
     * @param {?} keyNumber
     * @return {?}
     */
    TranslationService.prototype.translateNumber = function (keyNumber) {
        if (!isNaN(keyNumber) && IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeNumber = new Intl.NumberFormat(this.language).format(keyNumber);
            return localeNumber;
        }
        return keyNumber.toString();
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.parseValue = function (key, value, args, lang) {
        if (value == null || value == "") {
            return this.handleMissingValue(key, args, lang);
        }
        else if (args) {
            return this.handleArgs(value, args);
        }
        return value;
    };
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.handleMissingValue = function (key, args, lang) {
        if (this.configuration.missingKey != null) {
            return this.translate(this.configuration.missingKey, args, lang);
        }
        else if (this.configuration.missingValue != null) {
            return this.configuration.missingValue;
        }
        // The same key is returned.
        return key;
    };
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    TranslationService.prototype.handleArgs = function (value, args) {
        var /** @type {?} */ TEMPLATE_REGEXP = /{{\s?([^{}\s]*)\s?}}/g;
        return value.replace(TEMPLATE_REGEXP, function (substring, parsedKey) {
            var /** @type {?} */ replacer = (args[parsedKey]);
            return typeof replacer !== "undefined" ? replacer : substring;
        });
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.loadTranslation = function () {
        var /** @type {?} */ language = !this.configuration.localeAsLanguage
            ? this.locale.getCurrentLanguage()
            : this.locale.getCurrentLanguage()
                + "-"
                + this.locale.getCurrentCountry();
        if (language != null && language != this.language) {
            if (this.loadingMode == LoadingMode.Async) {
                this.getTranslation(language);
            }
            else {
                this.releaseTranslation(language);
            }
        }
    };
    /**
     * @param {?} language
     * @return {?}
     */
    TranslationService.prototype.getTranslation = function (language) {
        var _this = this;
        this.translationData = {};
        this.serviceState = ServiceState.isLoading;
        var /** @type {?} */ observableSequencesOfTranslationData = [];
        for (var _i = 0, _a = this.configuration.providers; _i < _a.length; _i++) {
            var provider = _a[_i];
            var /** @type {?} */ url = provider.prefix;
            if (provider.webAPI) {
                url += language;
            }
            else {
                url += language + "." + provider.dataFormat;
            }
            observableSequencesOfTranslationData.push(this.getTranslationByProvider(url));
        }
        // Merges all the observable sequences into a single observable sequence.
        rxjs_Observable.Observable.merge.apply(rxjs_Observable.Observable, observableSequencesOfTranslationData).subscribe(function (data) {
            _this.addData(data, language);
        }, function (error) {
            console.error("Translation service:", error);
        }, function () {
            _this.releaseTranslation(language);
        });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    TranslationService.prototype.getTranslationByProvider = function (url) {
        return this.http.get(url)
            .map(function (res) { return res.json(); });
    };
    /**
     * @param {?} data
     * @param {?} language
     * @return {?}
     */
    TranslationService.prototype.addData = function (data, language) {
        this.translationData[language] = typeof this.translationData[language] !== "undefined"
            ? this.extend(this.translationData[language], data)
            : data;
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    TranslationService.prototype.extend = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var /** @type {?} */ newObj = {};
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var obj = args_1[_a];
            for (var key in obj) {
                newObj[key] = obj[key];
            }
        }
        return newObj;
    };
    /**
     * @param {?} language
     * @return {?}
     */
    TranslationService.prototype.releaseTranslation = function (language) {
        this.serviceState = ServiceState.isReady;
        this.language = language;
        // Sends an event for the components.
        this.translationChanged.emit(language);
    };
    TranslationService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    TranslationService.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: _angular_http.Http, },
    ]; };
    TranslationService.propDecorators = {
        'translationChanged': [{ type: _angular_core.Output },],
    };
    return TranslationService;
}());

/**
 * Extend this class in components to provide 'lang' to the 'translate' pipe.
 */
var Translation = (function () {
    /**
     * @param {?} translation
     * @param {?=} changeDetectorRef
     */
    function Translation(translation, changeDetectorRef) {
        var _this = this;
        this.translation = translation;
        this.changeDetectorRef = changeDetectorRef;
        this.lang = this.translation.getLanguage();
        // When the language changes, subscribes to the event & updates lang property.
        this.translation.translationChanged.subscribe(function (language) {
            _this.lang = language;
            // OnPush Change Detection strategy.
            if (_this.changeDetectorRef) {
                _this.changeDetectorRef.markForCheck();
            }
            
        });
    }
    return Translation;
}());

var __extends$3 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Extend this class in components to provide 'lang', 'defaultLocale' & 'currency' to the translate and locale pipes.
 */
var Localization = (function (_super) {
    __extends$3(Localization, _super);
    /**
     * @param {?} locale
     * @param {?} translation
     * @param {?=} changeDetectorRef
     */
    function Localization(locale, translation, changeDetectorRef) {
        var _this = this;
        _super.call(this, translation, changeDetectorRef);
        this.locale = locale;
        this.translation = translation;
        this.changeDetectorRef = changeDetectorRef;
        this.defaultLocale = this.locale.getDefaultLocale();
        // When the default locale changes, subscribes to the event & updates defaultLocale property.
        this.locale.defaultLocaleChanged.subscribe(function (defaultLocale) {
            _this.defaultLocale = defaultLocale;
            // OnPush Change Detection strategy.
            if (_this.changeDetectorRef) {
                _this.changeDetectorRef.markForCheck();
            }
            
        });
        this.currency = this.locale.getCurrentCurrency();
        // When the currency changes, subscribes to the event & updates currency property.
        this.locale.currencyCodeChanged.subscribe(function (currency) {
            _this.currency = currency;
            // OnPush Change Detection strategy.
            if (_this.changeDetectorRef) {
                _this.changeDetectorRef.markForCheck();
            }
            
        });
    }
    return Localization;
}(Translation));

/**
 * Converts numbers to Unicode according to default locale.
 * @abstract
 */
var NumberCode = (function () {
    /**
     * @param {?} defaultLocale
     */
    function NumberCode(defaultLocale) {
        this.defaultLocale = defaultLocale;
        this.numbersCodes = [];
        for (var num = 0; num <= 9; num++) {
            this.numbersCodes.push(this.Unicode(num.toString()));
        }
        // Tries to update Unicode for numbers according to default locale.
        if (IntlAPI.HasNumberFormat()) {
            for (var num = 0; num <= 9; num++) {
                this.numbersCodes[num] = this.Unicode(new Intl.NumberFormat(defaultLocale).format(num));
            }
        }
    }
    /**
     * @abstract
     * @param {?} s
     * @return {?}
     */
    NumberCode.prototype.parse = function (s) { };
    /**
     * @param {?} pattern
     * @return {?}
     */
    NumberCode.prototype.UnicodeToChar = function (pattern) {
        return pattern.replace(/\\u[\dA-F]{4}/gi, function (match) {
            return String.fromCharCode(parseInt(match.replace(/\\u/g, ""), 16));
        });
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberCode.prototype.Unicode = function (c) {
        return "\\u" + this.HexEncode(c.charCodeAt(0));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberCode.prototype.HexEncode = function (value) {
        var /** @type {?} */ hex = value.toString(16).toUpperCase();
        // With padding.
        hex = "0000".substr(0, 4 - hex.length) + hex;
        return hex;
    };
    return NumberCode;
}());

var __extends$4 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Converts numbers & signs to Unicode according to default locale.
 */
var DecimalCode = (function (_super) {
    __extends$4(DecimalCode, _super);
    /**
     * @param {?} defaultLocale
     */
    function DecimalCode(defaultLocale) {
        _super.call(this, defaultLocale);
        this.defaultLocale = defaultLocale;
        this.minusSignCode = this.Unicode("-");
        this.decimalSeparatorCode = this.Unicode(".");
        // Tries to update Unicode for signs according to default locale.
        if (IntlAPI.HasNumberFormat()) {
            var value = -0.9; // Reference value.
            var localeValue = new Intl.NumberFormat(defaultLocale).format(value);
            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).
            if (this.Unicode(localeValue.charAt(0)) == "\\u200F") {
                // Right to left.
                this.minusSignCode = this.Unicode(localeValue.charAt(1));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(3));
            }
            else if (this.Unicode(localeValue.charAt(0)) == this.Unicode(new Intl.NumberFormat(defaultLocale).format(0))) {
                // IE & Edge reverse the order.
                this.minusSignCode = this.Unicode(localeValue.charAt(3));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(1));
            }
            else {
                // Left to right.
                this.minusSignCode = this.Unicode(localeValue.charAt(0));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(2));
            }
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    DecimalCode.prototype.parse = function (s) {
        var /** @type {?} */ characters = s.split("");
        var /** @type {?} */ value = "";
        for (var _i = 0, characters_1 = characters; _i < characters_1.length; _i++) {
            var char = characters_1[_i];
            var /** @type {?} */ charCode = this.Unicode(char);
            var /** @type {?} */ index = this.numbersCodes.indexOf(charCode);
            if (index != -1) {
                value += index;
            }
            else if (charCode == this.minusSignCode) {
                value += "-";
            }
            else if (charCode == this.decimalSeparatorCode) {
                value += ".";
            }
            else {
                return NaN;
            }
        }
        return parseFloat(value);
    };
    return DecimalCode;
}(NumberCode));

/**
 * Provides the methods to convert strings according to default locale.
 */
var LocaleValidation = (function () {
    /**
     * @param {?} locale
     */
    function LocaleValidation(locale) {
        this.locale = locale;
    }
    /**
     * Converts a string to a number according to default locale.
    If the string cannot be converted to a number, returns NaN.
     * @param {?} s
     * @return {?}
     */
    LocaleValidation.prototype.parseNumber = function (s) {
        if (s == "") {
            return null;
        }
        var /** @type {?} */ decimalCode = new DecimalCode(this.locale.getDefaultLocale());
        return decimalCode.parse(s);
    };
    LocaleValidation.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    LocaleValidation.ctorParameters = function () { return [
        { type: LocaleService, },
    ]; };
    return LocaleValidation;
}());

/**
 * Intl.Collator APIs.
 */
var Collator = (function () {
    /**
     * @param {?} translation
     */
    function Collator(translation) {
        this.translation = translation;
    }
    /**
     * Compares two keys by the value of translation according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} key1
     * @param {?} key2
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} A negative value if the value of translation of key1 comes before the value of translation of key2;
     *         a positive value if key1 comes after key2;
     *         0 if they are considered equal or Intl.Collator is not supported
     */
    Collator.prototype.compare = function (key1, key2, extension, options) {
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        if (!IntlAPI.HasCollator()) {
            return 0;
        }
        var /** @type {?} */ value1 = this.translation.translate(key1);
        var /** @type {?} */ value2 = this.translation.translate(key2);
        var /** @type {?} */ locale = this.addExtension(this.translation.getLanguage(), extension);
        return new Intl.Collator(locale, options).compare(value1, value2);
    };
    /**
     * Sorts an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} The same sorted list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.sort = function (list, keyName, order, extension, options) {
        var _this = this;
        if (order === void 0) { order = "asc"; }
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        if (!list || !keyName || !IntlAPI.HasCollator()) {
            return list;
        }
        list.sort(function (key1, key2) {
            return _this.compare(key1[keyName], key2[keyName], extension, options);
        });
        if (order == "desc") {
            list.reverse();
        }
        return list;
    };
    /**
     * Sorts asynchronously an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} An observable of the sorted list or of the same list if Intl.Collator is not supported
     */
    Collator.prototype.sortAsync = function (list, keyName, order, extension, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        return rxjs_Observable.Observable.create(function (observer) {
            observer.next(_this.sort(list, keyName, order, extension, options));
            observer.complete();
        });
    };
    /**
     * Matches a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} A filtered list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.search = function (s, list, keyNames, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'search' }; }
        if (!list || !keyNames || s == "" || s == null || !IntlAPI.HasCollator()) {
            return list;
        }
        var /** @type {?} */ locale = this.translation.getLanguage();
        var /** @type {?} */ collator = new Intl.Collator(locale, options);
        var /** @type {?} */ matches = list.filter(function (key) {
            var /** @type {?} */ found = false;
            for (var /** @type {?} */ i = 0; i < keyNames.length; i++) {
                if (_this.match(key[keyNames[i]], s, collator)) {
                    found = true;
                    break;
                }
            }
            return found;
        });
        return matches;
    };
    /**
     * Matches asynchronously a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} An observable of the filtered list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.searchAsync = function (s, list, keyNames, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'search' }; }
        return rxjs_Observable.Observable.create(function (observer) {
            observer.next(_this.search(s, list, keyNames, options));
            observer.complete();
        });
    };
    /**
     * @param {?} locale
     * @param {?=} extension
     * @return {?}
     */
    Collator.prototype.addExtension = function (locale, extension) {
        if (!!extension) {
            locale = locale + "-u-" + extension;
        }
        return locale;
    };
    /**
     * @param {?} key
     * @param {?} s
     * @param {?} collator
     * @return {?}
     */
    Collator.prototype.match = function (key, s, collator) {
        var /** @type {?} */ value = this.translation.translate(key);
        var /** @type {?} */ valueLength = value.length;
        var /** @type {?} */ sLength = s.length;
        if (sLength > valueLength) {
            return false;
        }
        if (sLength == valueLength) {
            return collator.compare(value, s) == 0;
        }
        var /** @type {?} */ found = false;
        for (var /** @type {?} */ i = 0; i < valueLength - (sLength - 1); i++) {
            var /** @type {?} */ str = value.substr(i, sLength);
            if (collator.compare(str, s) == 0) {
                found = true;
                break;
            }
        }
        return found;
    };
    Collator.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    Collator.ctorParameters = function () { return [
        { type: TranslationService, },
    ]; };
    return Collator;
}());

var TranslatePipe = (function () {
    /**
     * @param {?} translation
     */
    function TranslatePipe(translation) {
        this.translation = translation;
    }
    /**
     * @param {?} key
     * @param {?} lang
     * @param {...?} args
     * @return {?}
     */
    TranslatePipe.prototype.transform = function (key, lang) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (this.translation.serviceState == ServiceState.isReady) {
            return this.translation.translate(key, args[0], lang);
        }
        // If the service is not ready, returns an empty string.
        return "";
    };
    TranslatePipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'translate',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    TranslatePipe.ctorParameters = function () { return [
        { type: TranslationService, },
    ]; };
    return TranslatePipe;
}());

var LocaleDatePipe = (function () {
    function LocaleDatePipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} pattern
     * @return {?}
     */
    LocaleDatePipe.prototype.transform = function (value, defaultLocale, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        if (IntlAPI.HasDateTimeFormat()) {
            var /** @type {?} */ localeDate = new _angular_common.DatePipe(defaultLocale);
            return localeDate.transform(value, pattern);
        }
        // Returns the date without localization.
        return value;
    };
    LocaleDatePipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'localeDate',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocaleDatePipe.ctorParameters = function () { return []; };
    return LocaleDatePipe;
}());

var LocaleDecimalPipe = (function () {
    function LocaleDecimalPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    LocaleDecimalPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeDecimal = new _angular_common.DecimalPipe(defaultLocale);
            return localeDecimal.transform(value, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocaleDecimalPipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'localeDecimal',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocaleDecimalPipe.ctorParameters = function () { return []; };
    return LocaleDecimalPipe;
}());
var LocalePercentPipe = (function () {
    function LocalePercentPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    LocalePercentPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localePercent = new _angular_common.PercentPipe(defaultLocale);
            return localePercent.transform(value, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocalePercentPipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'localePercent',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocalePercentPipe.ctorParameters = function () { return []; };
    return LocalePercentPipe;
}());
var LocaleCurrencyPipe = (function () {
    function LocaleCurrencyPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?} currency
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    LocaleCurrencyPipe.prototype.transform = function (value, defaultLocale, currency, symbolDisplay, digits) {
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeCurrency = new _angular_common.CurrencyPipe(defaultLocale);
            return localeCurrency.transform(value, currency, symbolDisplay, digits);
        }
        // Returns the number & currency without localization.
        return value + " " + currency;
    };
    LocaleCurrencyPipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'localeCurrency',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocaleCurrencyPipe.ctorParameters = function () { return []; };
    return LocaleCurrencyPipe;
}());

/**
 * Breadth First Search (BFS) algorithm for traversing & searching tree data structure of DOM
explores the neighbor nodes first, before moving to the next level neighbors.
Time complexity: between O(1) and O(|V|^2).
 */
var BFS = (function () {
    function BFS() {
    }
    /**
     * Target node is a non empty text node.
     * @param {?} rootNode
     * @return {?}
     */
    BFS.prototype.getTargetNode = function (rootNode) {
        return this.walk(rootNode);
    };
    /**
     * @param {?} rootNode
     * @return {?}
     */
    BFS.prototype.walk = function (rootNode) {
        var /** @type {?} */ queue = [];
        var /** @type {?} */ iNode;
        queue.push(rootNode);
        while (queue.length > 0) {
            iNode = queue.shift();
            if (this.isTargetNode(iNode)) {
                return iNode;
            }
            for (var _i = 0, _a = iNode.childNodes; _i < _a.length; _i++) {
                var child = _a[_i];
                queue.push(child);
            }
        }
        return null;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BFS.prototype.isTargetNode = function (node) {
        return typeof node !== "undefined" &&
            node.nodeValue != null &&
            node.nodeValue.trim() != "" &&
            node.nodeType == 3;
    };
    return BFS;
}());

/**
 * @abstract
 */
var BaseDirective = (function () {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    function BaseDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.breadthFirstSearch = new BFS();
    }
    /**
     * @return {?}
     */
    BaseDirective.prototype.ngAfterViewInit = function () {
        this.element = this.el.nativeElement;
        this.renderNode = this.breadthFirstSearch.getTargetNode(this.element);
        this.nodeValue = this.renderNode != null ? (this.renderNode.nodeValue) : null;
        if (this.element.hasChildNodes()) {
            this.key = this.getText();
        }
        else if (this.element.hasAttribute("value")) {
            this.key = this.element.getAttribute("value");
        }
        if (!!this.key) {
            this.setup();
        }
    };
    
    /**
     * @abstract
     * @return {?}
     */
    BaseDirective.prototype.setup = function () { };
    /**
     * @abstract
     * @return {?}
     */
    BaseDirective.prototype.replace = function () { };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseDirective.prototype.setText = function (value) {
        if (!!this.nodeValue) {
            this.renderer.setText(this.renderNode, this.nodeValue.replace(this.key, value));
        }
        else if (this.element.hasAttribute("value")) {
            this.renderer.setElementAttribute(this.element, "value", value);
        }
    };
    /**
     * @return {?}
     */
    BaseDirective.prototype.getText = function () {
        return this.nodeValue != null ? this.nodeValue.trim() : null;
    };
    return BaseDirective;
}());

var __extends$5 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TranslateDirective = (function (_super) {
    __extends$5(TranslateDirective, _super);
    /**
     * @param {?} translation
     * @param {?} el
     * @param {?} renderer
     */
    function TranslateDirective(translation, el, renderer) {
        _super.call(this, el, renderer);
        this.translation = translation;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    TranslateDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.translation.translationChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    TranslateDirective.prototype.replace = function () {
        var _this = this;
        this.translation.translateAsync(this.key, this.params).subscribe(function (value) {
            _this.setText(value);
        });
    };
    TranslateDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[translate]'
                },] },
    ];
    /** @nocollapse */
    TranslateDirective.ctorParameters = function () { return [
        { type: TranslationService, },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    TranslateDirective.propDecorators = {
        'params': [{ type: _angular_core.Input, args: ['translate',] },],
    };
    return TranslateDirective;
}(BaseDirective));

var __extends$6 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var LocaleDateDirective = (function (_super) {
    __extends$6(LocaleDateDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleDateDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultPattern = 'mediumDate';
    }
    /**
     * @return {?}
     */
    LocaleDateDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocaleDateDirective.prototype.replace = function () {
        if (IntlAPI.HasDateTimeFormat()) {
            var /** @type {?} */ localeDate = new _angular_common.DatePipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localeDate.transform(this.key, this.pattern || this.defaultPattern);
            this.setText(value);
        }
    };
    LocaleDateDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[localeDate]'
                },] },
    ];
    /** @nocollapse */
    LocaleDateDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    LocaleDateDirective.propDecorators = {
        'pattern': [{ type: _angular_core.Input, args: ['localeDate',] },],
    };
    return LocaleDateDirective;
}(BaseDirective));

var __extends$7 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var LocaleDecimalDirective = (function (_super) {
    __extends$7(LocaleDecimalDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleDecimalDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultDigits = null;
    }
    /**
     * @return {?}
     */
    LocaleDecimalDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocaleDecimalDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeDecimal = new _angular_common.DecimalPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localeDecimal.transform(this.key, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocaleDecimalDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[localeDecimal]'
                },] },
    ];
    /** @nocollapse */
    LocaleDecimalDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    LocaleDecimalDirective.propDecorators = {
        'digits': [{ type: _angular_core.Input, args: ['localeDecimal',] },],
    };
    return LocaleDecimalDirective;
}(BaseDirective));
var LocalePercentDirective = (function (_super) {
    __extends$7(LocalePercentDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocalePercentDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultDigits = null;
    }
    /**
     * @return {?}
     */
    LocalePercentDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocalePercentDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localePercent = new _angular_common.PercentPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localePercent.transform(this.key, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocalePercentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[localePercent]'
                },] },
    ];
    /** @nocollapse */
    LocalePercentDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    LocalePercentDirective.propDecorators = {
        'digits': [{ type: _angular_core.Input, args: ['localePercent',] },],
    };
    return LocalePercentDirective;
}(BaseDirective));
var LocaleCurrencyDirective = (function (_super) {
    __extends$7(LocaleCurrencyDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleCurrencyDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.symbolDisplay = false;
        this.defaultDigits = null;
    }
    Object.defineProperty(LocaleCurrencyDirective.prototype, "symbol", {
        /**
         * @param {?} symbolDisplay
         * @return {?}
         */
        set: function (symbolDisplay) {
            this.symbolDisplay = symbolDisplay || this.symbolDisplay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LocaleCurrencyDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
        this.locale.currencyCodeChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocaleCurrencyDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeCurrency = new _angular_common.CurrencyPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localeCurrency.transform(this.key, this.locale.getCurrentCurrency(), this.symbolDisplay, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocaleCurrencyDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[localeCurrency]'
                },] },
    ];
    /** @nocollapse */
    LocaleCurrencyDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    LocaleCurrencyDirective.propDecorators = {
        'digits': [{ type: _angular_core.Input, args: ['localeCurrency',] },],
        'symbol': [{ type: _angular_core.Input },],
    };
    return LocaleCurrencyDirective;
}(BaseDirective));

/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return typeof obj !== "undefined" && obj != null;
}
var RegExpFactory = (function () {
    function RegExpFactory() {
    }
    /**
     * Builds the regular expression for a number according to default locale.
     * @param {?} defaultLocale
     * @param {?} digits
     * @return {?}
     */
    RegExpFactory.prototype.number = function (defaultLocale, digits) {
        var /** @type {?} */ minInt = 1;
        var /** @type {?} */ minFraction = 0;
        var /** @type {?} */ maxFraction = 3;
        if (isPresent(digits)) {
            var /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
            var /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);
            if (isPresent(parts[1])) {
                minInt = parseInt(parts[1]);
            }
            if (isPresent(parts[3])) {
                minFraction = parseInt(parts[3]);
            }
            if (isPresent(parts[5])) {
                maxFraction = parseInt(parts[5]);
            }
        }
        var /** @type {?} */ decimalCode = new DecimalCode(defaultLocale);
        var /** @type {?} */ minusSign = decimalCode.minusSignCode;
        var /** @type {?} */ zero = decimalCode.numbersCodes[0];
        var /** @type {?} */ decimalSeparator = decimalCode.decimalSeparatorCode;
        var /** @type {?} */ nine = decimalCode.numbersCodes[9];
        // Pattern for 1.2-2 digits: /^-?[0-9]{1,}\.[0-9]{2,2}$/
        // Unicode pattern = "^\u002d?[\u0030-\u0039]{1,}\\u002e[\u0030-\u0039]{2,2}$"
        var /** @type {?} */ pattern;
        if (minFraction > 0 && maxFraction > 0) {
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else if (minFraction == 0 && maxFraction > 0) {
            // Decimal separator is optional.
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "?[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else {
            // Integer number.
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}$";
        }
        pattern = decimalCode.UnicodeToChar(pattern);
        var /** @type {?} */ regExp = new RegExp(pattern);
        return regExp;
    };
    return RegExpFactory;
}());

/**
 * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.
 * @param {?} locale The reference to LocaleService
 * @param {?} digits The format of the number
 * @param {?=} MIN_VALUE The minimum value for the number
 * @param {?=} MAX_VALUE The maximum value for the number
 * @return {?} An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid
 */
function validateLocaleNumber(locale, digits, MIN_VALUE, MAX_VALUE) {
    if (MIN_VALUE === void 0) { MIN_VALUE = Number.MIN_VALUE; }
    if (MAX_VALUE === void 0) { MAX_VALUE = Number.MAX_VALUE; }
    var /** @type {?} */ defaultLocale;
    var /** @type {?} */ NUMBER_REGEXP;
    return function (formControl) {
        if (formControl.value == null || formControl.value == "") {
            return null;
        }
        if (defaultLocale != locale.getDefaultLocale()) {
            var /** @type {?} */ regExpFactory = new RegExpFactory();
            NUMBER_REGEXP = regExpFactory.number(locale.getDefaultLocale(), digits);
            defaultLocale = locale.getDefaultLocale();
        }
        if (NUMBER_REGEXP.test(formControl.value)) {
            var /** @type {?} */ parsedValue = void 0;
            var /** @type {?} */ localeValidation = new LocaleValidation(locale);
            parsedValue = localeValidation.parseNumber(formControl.value);
            if (parsedValue < MIN_VALUE) {
                return {
                    minValue: {
                        valid: false
                    }
                };
            }
            else if (parsedValue > MAX_VALUE) {
                return {
                    maxValue: {
                        valid: false
                    }
                };
            }
            return null; // The number is valid.
        }
        else {
            return {
                format: {
                    valid: false
                }
            };
        }
    };
}
var LocaleNumberValidatorDirective = (function () {
    /**
     * @param {?} locale
     */
    function LocaleNumberValidatorDirective(locale) {
        this.locale = locale;
        this.MIN_VALUE = Number.MIN_VALUE;
        this.MAX_VALUE = Number.MAX_VALUE;
    }
    Object.defineProperty(LocaleNumberValidatorDirective.prototype, "minValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.MIN_VALUE = value || this.MIN_VALUE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocaleNumberValidatorDirective.prototype, "maxValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.MAX_VALUE = value || this.MAX_VALUE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LocaleNumberValidatorDirective.prototype.ngOnInit = function () {
        this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);
    };
    /**
     * @param {?} formControl
     * @return {?}
     */
    LocaleNumberValidatorDirective.prototype.validate = function (formControl) {
        return this.validator(formControl);
    };
    LocaleNumberValidatorDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]',
                    providers: [
                        { provide: _angular_forms.NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return LocaleNumberValidatorDirective; }), multi: true }
                    ]
                },] },
    ];
    /** @nocollapse */
    LocaleNumberValidatorDirective.ctorParameters = function () { return [
        { type: LocaleService, },
    ]; };
    LocaleNumberValidatorDirective.propDecorators = {
        'digits': [{ type: _angular_core.Input, args: ['validateLocaleNumber',] },],
        'minValue': [{ type: _angular_core.Input },],
        'maxValue': [{ type: _angular_core.Input },],
    };
    return LocaleNumberValidatorDirective;
}());

var TranslationModule = (function () {
    function TranslationModule() {
    }
    /**
     * Use in AppModule: new instances of LocaleService & TranslationService.
     * @return {?}
     */
    TranslationModule.forRoot = function () {
        return {
            ngModule: TranslationModule,
            providers: [LocaleService, TranslationService]
        };
    };
    /**
     * Use in features modules with lazy loading: new instance of TranslationService.
     * @return {?}
     */
    TranslationModule.forChild = function () {
        return {
            ngModule: TranslationModule,
            providers: [TranslationService]
        };
    };
    TranslationModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: [
                        TranslatePipe,
                        TranslateDirective
                    ],
                    exports: [
                        TranslatePipe,
                        TranslateDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    TranslationModule.ctorParameters = function () { return []; };
    return TranslationModule;
}());

var LocalizationModule = (function () {
    function LocalizationModule() {
    }
    /**
     * Use in AppModule: new instances of LocaleService & TranslationService.
     * @return {?}
     */
    LocalizationModule.forRoot = function () {
        return {
            ngModule: LocalizationModule,
            providers: [LocaleService, TranslationService]
        };
    };
    /**
     * Use in features modules with lazy loading: new instance of TranslationService.
     * @return {?}
     */
    LocalizationModule.forChild = function () {
        return {
            ngModule: LocalizationModule,
            providers: [TranslationService]
        };
    };
    LocalizationModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: [
                        LocaleDatePipe,
                        LocaleDecimalPipe,
                        LocalePercentPipe,
                        LocaleCurrencyPipe,
                        LocaleDateDirective,
                        LocaleDecimalDirective,
                        LocalePercentDirective,
                        LocaleCurrencyDirective
                    ],
                    imports: [
                        TranslationModule
                    ],
                    exports: [
                        TranslationModule,
                        LocaleDatePipe,
                        LocaleDecimalPipe,
                        LocalePercentPipe,
                        LocaleCurrencyPipe,
                        LocaleDateDirective,
                        LocaleDecimalDirective,
                        LocalePercentDirective,
                        LocaleCurrencyDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    LocalizationModule.ctorParameters = function () { return []; };
    return LocalizationModule;
}());

var LocaleValidationModule = (function () {
    function LocaleValidationModule() {
    }
    /**
     * Use in AppModule: new instance of LocaleValidation.
     * @return {?}
     */
    LocaleValidationModule.forRoot = function () {
        return {
            ngModule: LocaleValidationModule,
            providers: [LocaleValidation]
        };
    };
    LocaleValidationModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: [
                        LocaleNumberValidatorDirective
                    ],
                    exports: [
                        LocaleNumberValidatorDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    LocaleValidationModule.ctorParameters = function () { return []; };
    return LocaleValidationModule;
}());

/**
 * Angular l10n.
 * An Angular library to translate messages, dates and numbers.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular-l10n
 */
/**
 * Entry point for all public APIs of the package.
 */

exports.LocaleService = LocaleService;
exports.TranslationService = TranslationService;
exports.Translation = Translation;
exports.Localization = Localization;
exports.LocaleValidation = LocaleValidation;
exports.Collator = Collator;
exports.IntlAPI = IntlAPI;
exports.ServiceState = ServiceState;
exports.TranslatePipe = TranslatePipe;
exports.LocaleDatePipe = LocaleDatePipe;
exports.LocaleDecimalPipe = LocaleDecimalPipe;
exports.LocalePercentPipe = LocalePercentPipe;
exports.LocaleCurrencyPipe = LocaleCurrencyPipe;
exports.TranslateDirective = TranslateDirective;
exports.LocaleDateDirective = LocaleDateDirective;
exports.LocaleDecimalDirective = LocaleDecimalDirective;
exports.LocalePercentDirective = LocalePercentDirective;
exports.LocaleCurrencyDirective = LocaleCurrencyDirective;
exports.LocaleNumberValidatorDirective = LocaleNumberValidatorDirective;
exports.validateLocaleNumber = validateLocaleNumber;
exports.TranslationModule = TranslationModule;
exports.LocalizationModule = LocalizationModule;
exports.LocaleValidationModule = LocaleValidationModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
