{"version":3,"file":"locale-number-validator.directive.js","sourceRoot":"","sources":["../../../src/directives/locale-number-validator.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, forwardRef, Input, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, FormControl, Validator } from '@angular/forms';\n\nimport { LocaleService } from '../services/locale.service';\nimport { LocaleValidation } from '../services/locale-validation';\nimport { RegExpFactory } from '../models/validation/regexp-factory';\n/**\n * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.\n * @param {?} locale The reference to LocaleService\n * @param {?} digits The format of the number\n * @param {?=} MIN_VALUE The minimum value for the number\n * @param {?=} MAX_VALUE The maximum value for the number\n * @return {?} An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid\n */\nexport function validateLocaleNumber(\n    locale: LocaleService,\n    digits: string,\n    MIN_VALUE: number = Number.MIN_VALUE,\n    MAX_VALUE: number = Number.MAX_VALUE\n): Function {\n\n    let /** @type {?} */ defaultLocale: string;\n    let /** @type {?} */ NUMBER_REGEXP: RegExp;\n\n    return (formControl: FormControl): { [key: string]: any } => {\n        if (formControl.value == null || formControl.value == \"\") { return null; }\n\n        if (defaultLocale != locale.getDefaultLocale()) {\n            let /** @type {?} */ regExpFactory: RegExpFactory = new RegExpFactory();\n            NUMBER_REGEXP = regExpFactory.number(locale.getDefaultLocale(), digits);\n            defaultLocale = locale.getDefaultLocale();\n        }\n\n        if (NUMBER_REGEXP.test(formControl.value)) {\n            let /** @type {?} */ parsedValue: number;\n            let /** @type {?} */ localeValidation: LocaleValidation = new LocaleValidation(locale);\n            parsedValue = localeValidation.parseNumber(formControl.value);\n            if (parsedValue < MIN_VALUE) {\n                return {\n                    minValue: {\n                        valid: false\n                    }\n                };\n            } else if (parsedValue > MAX_VALUE) {\n                return {\n                    maxValue: {\n                        valid: false\n                    }\n                };\n            }\n            return null; // The number is valid.\n        } else {\n            return {\n                format: {\n                    valid: false\n                }\n            };\n        }\n    };\n\n}\nexport class LocaleNumberValidatorDirective implements Validator, OnInit {\npublic digits: string;\n/**\n * @param {?} value\n * @return {?}\n */\nset minValue(value: number) {\n        this.MIN_VALUE = value || this.MIN_VALUE;\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxValue(value: number) {\n        this.MAX_VALUE = value || this.MAX_VALUE;\n    }\nprivate MIN_VALUE: number = Number.MIN_VALUE;\nprivate MAX_VALUE: number = Number.MAX_VALUE;\nprivate validator: Function;\n/**\n * @param {?} locale\n */\nconstructor(public locale: LocaleService) { }\n/**\n * @return {?}\n */\npublic ngOnInit(): void {\n        this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);\n    }\n/**\n * @param {?} formControl\n * @return {?}\n */\npublic validate(formControl: FormControl): Function {\n        return this.validator(formControl);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]',\n    providers: [\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => LocaleNumberValidatorDirective), multi: true }\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'digits': [{ type: Input, args: ['validateLocaleNumber', ] },],\n'minValue': [{ type: Input },],\n'maxValue': [{ type: Input },],\n};\n}\n\nfunction LocaleNumberValidatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleNumberValidatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleNumberValidatorDirective.ctorParameters;\n/** @type {?} */\nLocaleNumberValidatorDirective.propDecorators;\n/**\n * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.\n * @type {?}\n */\nLocaleNumberValidatorDirective.prototype.digits;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MIN_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.MAX_VALUE;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.validator;\n/** @type {?} */\nLocaleNumberValidatorDirective.prototype.locale;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}