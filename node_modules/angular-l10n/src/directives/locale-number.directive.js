var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Directive, ElementRef, Input, Renderer } from '@angular/core';
import { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';
import { LocaleService } from '../services/locale.service';
import { IntlAPI } from '../services/intl-api';
import { BaseDirective } from '../models/utils/base-directive';
export var LocaleDecimalDirective = (function (_super) {
    __extends(LocaleDecimalDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleDecimalDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultDigits = null;
    }
    /**
     * @return {?}
     */
    LocaleDecimalDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocaleDecimalDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeDecimal = new DecimalPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localeDecimal.transform(this.key, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocaleDecimalDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localeDecimal]'
                },] },
    ];
    /** @nocollapse */
    LocaleDecimalDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocaleDecimalDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localeDecimal',] },],
    };
    return LocaleDecimalDirective;
}(BaseDirective));
function LocaleDecimalDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleDecimalDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleDecimalDirective.ctorParameters;
    /** @type {?} */
    LocaleDecimalDirective.propDecorators;
    /** @type {?} */
    LocaleDecimalDirective.prototype.digits;
    /** @type {?} */
    LocaleDecimalDirective.prototype.defaultDigits;
    /** @type {?} */
    LocaleDecimalDirective.prototype.locale;
    /** @type {?} */
    LocaleDecimalDirective.prototype.el;
    /** @type {?} */
    LocaleDecimalDirective.prototype.renderer;
}
export var LocalePercentDirective = (function (_super) {
    __extends(LocalePercentDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocalePercentDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultDigits = null;
    }
    /**
     * @return {?}
     */
    LocalePercentDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocalePercentDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localePercent = new PercentPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localePercent.transform(this.key, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocalePercentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localePercent]'
                },] },
    ];
    /** @nocollapse */
    LocalePercentDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocalePercentDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localePercent',] },],
    };
    return LocalePercentDirective;
}(BaseDirective));
function LocalePercentDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocalePercentDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocalePercentDirective.ctorParameters;
    /** @type {?} */
    LocalePercentDirective.propDecorators;
    /** @type {?} */
    LocalePercentDirective.prototype.digits;
    /** @type {?} */
    LocalePercentDirective.prototype.defaultDigits;
    /** @type {?} */
    LocalePercentDirective.prototype.locale;
    /** @type {?} */
    LocalePercentDirective.prototype.el;
    /** @type {?} */
    LocalePercentDirective.prototype.renderer;
}
export var LocaleCurrencyDirective = (function (_super) {
    __extends(LocaleCurrencyDirective, _super);
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    function LocaleCurrencyDirective(locale, el, renderer) {
        _super.call(this, el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.symbolDisplay = false;
        this.defaultDigits = null;
    }
    Object.defineProperty(LocaleCurrencyDirective.prototype, "symbol", {
        /**
         * @param {?} symbolDisplay
         * @return {?}
         */
        set: function (symbolDisplay) {
            this.symbolDisplay = symbolDisplay || this.symbolDisplay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LocaleCurrencyDirective.prototype.setup = function () {
        var _this = this;
        this.replace();
        this.locale.defaultLocaleChanged.subscribe(function () {
            _this.replace();
        });
        this.locale.currencyCodeChanged.subscribe(function () {
            _this.replace();
        });
    };
    /**
     * @return {?}
     */
    LocaleCurrencyDirective.prototype.replace = function () {
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeCurrency = new CurrencyPipe(this.locale.getDefaultLocale());
            var /** @type {?} */ value = localeCurrency.transform(this.key, this.locale.getCurrentCurrency(), this.symbolDisplay, this.digits || this.defaultDigits);
            this.setText(value);
        }
    };
    LocaleCurrencyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[localeCurrency]'
                },] },
    ];
    /** @nocollapse */
    LocaleCurrencyDirective.ctorParameters = function () { return [
        { type: LocaleService, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    LocaleCurrencyDirective.propDecorators = {
        'digits': [{ type: Input, args: ['localeCurrency',] },],
        'symbol': [{ type: Input },],
    };
    return LocaleCurrencyDirective;
}(BaseDirective));
function LocaleCurrencyDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleCurrencyDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleCurrencyDirective.ctorParameters;
    /** @type {?} */
    LocaleCurrencyDirective.propDecorators;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.digits;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.symbolDisplay;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.defaultDigits;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.locale;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.el;
    /** @type {?} */
    LocaleCurrencyDirective.prototype.renderer;
}
//# sourceMappingURL=locale-number.directive.js.map