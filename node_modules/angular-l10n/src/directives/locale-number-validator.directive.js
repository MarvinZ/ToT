import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { LocaleService } from '../services/locale.service';
import { LocaleValidation } from '../services/locale-validation';
import { RegExpFactory } from '../models/validation/regexp-factory';
/**
 * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.
 * @param {?} locale The reference to LocaleService
 * @param {?} digits The format of the number
 * @param {?=} MIN_VALUE The minimum value for the number
 * @param {?=} MAX_VALUE The maximum value for the number
 * @return {?} An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid
 */
export function validateLocaleNumber(locale, digits, MIN_VALUE, MAX_VALUE) {
    if (MIN_VALUE === void 0) { MIN_VALUE = Number.MIN_VALUE; }
    if (MAX_VALUE === void 0) { MAX_VALUE = Number.MAX_VALUE; }
    var /** @type {?} */ defaultLocale;
    var /** @type {?} */ NUMBER_REGEXP;
    return function (formControl) {
        if (formControl.value == null || formControl.value == "") {
            return null;
        }
        if (defaultLocale != locale.getDefaultLocale()) {
            var /** @type {?} */ regExpFactory = new RegExpFactory();
            NUMBER_REGEXP = regExpFactory.number(locale.getDefaultLocale(), digits);
            defaultLocale = locale.getDefaultLocale();
        }
        if (NUMBER_REGEXP.test(formControl.value)) {
            var /** @type {?} */ parsedValue = void 0;
            var /** @type {?} */ localeValidation = new LocaleValidation(locale);
            parsedValue = localeValidation.parseNumber(formControl.value);
            if (parsedValue < MIN_VALUE) {
                return {
                    minValue: {
                        valid: false
                    }
                };
            }
            else if (parsedValue > MAX_VALUE) {
                return {
                    maxValue: {
                        valid: false
                    }
                };
            }
            return null; // The number is valid.
        }
        else {
            return {
                format: {
                    valid: false
                }
            };
        }
    };
}
export var LocaleNumberValidatorDirective = (function () {
    /**
     * @param {?} locale
     */
    function LocaleNumberValidatorDirective(locale) {
        this.locale = locale;
        this.MIN_VALUE = Number.MIN_VALUE;
        this.MAX_VALUE = Number.MAX_VALUE;
    }
    Object.defineProperty(LocaleNumberValidatorDirective.prototype, "minValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.MIN_VALUE = value || this.MIN_VALUE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocaleNumberValidatorDirective.prototype, "maxValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.MAX_VALUE = value || this.MAX_VALUE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LocaleNumberValidatorDirective.prototype.ngOnInit = function () {
        this.validator = validateLocaleNumber(this.locale, this.digits, this.MIN_VALUE, this.MAX_VALUE);
    };
    /**
     * @param {?} formControl
     * @return {?}
     */
    LocaleNumberValidatorDirective.prototype.validate = function (formControl) {
        return this.validator(formControl);
    };
    LocaleNumberValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[validateLocaleNumber][ngModel],[validateLocaleNumber][formControl]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return LocaleNumberValidatorDirective; }), multi: true }
                    ]
                },] },
    ];
    /** @nocollapse */
    LocaleNumberValidatorDirective.ctorParameters = function () { return [
        { type: LocaleService, },
    ]; };
    LocaleNumberValidatorDirective.propDecorators = {
        'digits': [{ type: Input, args: ['validateLocaleNumber',] },],
        'minValue': [{ type: Input },],
        'maxValue': [{ type: Input },],
    };
    return LocaleNumberValidatorDirective;
}());
function LocaleNumberValidatorDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleNumberValidatorDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleNumberValidatorDirective.ctorParameters;
    /** @type {?} */
    LocaleNumberValidatorDirective.propDecorators;
    /**
     * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.
     * @type {?}
     */
    LocaleNumberValidatorDirective.prototype.digits;
    /** @type {?} */
    LocaleNumberValidatorDirective.prototype.MIN_VALUE;
    /** @type {?} */
    LocaleNumberValidatorDirective.prototype.MAX_VALUE;
    /** @type {?} */
    LocaleNumberValidatorDirective.prototype.validator;
    /** @type {?} */
    LocaleNumberValidatorDirective.prototype.locale;
}
//# sourceMappingURL=locale-number-validator.directive.js.map