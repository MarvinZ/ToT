import { Pipe } from '@angular/core';
import { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';
import { IntlAPI } from '../services/intl-api';
export var LocaleDecimalPipe = (function () {
    function LocaleDecimalPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    LocaleDecimalPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeDecimal = new DecimalPipe(defaultLocale);
            return localeDecimal.transform(value, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocaleDecimalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'localeDecimal',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocaleDecimalPipe.ctorParameters = function () { return []; };
    return LocaleDecimalPipe;
}());
function LocaleDecimalPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleDecimalPipe.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleDecimalPipe.ctorParameters;
}
export var LocalePercentPipe = (function () {
    function LocalePercentPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    LocalePercentPipe.prototype.transform = function (value, defaultLocale, digits) {
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localePercent = new PercentPipe(defaultLocale);
            return localePercent.transform(value, digits);
        }
        // Returns the number without localization.
        return value;
    };
    LocalePercentPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'localePercent',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocalePercentPipe.ctorParameters = function () { return []; };
    return LocalePercentPipe;
}());
function LocalePercentPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    LocalePercentPipe.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocalePercentPipe.ctorParameters;
}
export var LocaleCurrencyPipe = (function () {
    function LocaleCurrencyPipe() {
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?} currency
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    LocaleCurrencyPipe.prototype.transform = function (value, defaultLocale, currency, symbolDisplay, digits) {
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        if (digits === void 0) { digits = null; }
        if (IntlAPI.HasNumberFormat()) {
            var /** @type {?} */ localeCurrency = new CurrencyPipe(defaultLocale);
            return localeCurrency.transform(value, currency, symbolDisplay, digits);
        }
        // Returns the number & currency without localization.
        return value + " " + currency;
    };
    LocaleCurrencyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'localeCurrency',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    LocaleCurrencyPipe.ctorParameters = function () { return []; };
    return LocaleCurrencyPipe;
}());
function LocaleCurrencyPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleCurrencyPipe.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleCurrencyPipe.ctorParameters;
}
//# sourceMappingURL=locale-number.pipe.js.map