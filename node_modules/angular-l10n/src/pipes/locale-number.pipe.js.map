{"version":3,"file":"locale-number.pipe.js","sourceRoot":"","sources":["../../../src/pipes/locale-number.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { DecimalPipe, PercentPipe, CurrencyPipe } from '@angular/common';\n\nimport { IntlAPI } from '../services/intl-api';\nexport class LocaleDecimalPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits: string = null): string {\n        if (IntlAPI.HasNumberFormat()) {\n            let /** @type {?} */ localeDecimal: DecimalPipe = new DecimalPipe(defaultLocale);\n            return localeDecimal.transform(value, digits);\n        }\n        // Returns the number without localization.\n        return value;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n    name: 'localeDecimal',\n    pure: true\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleDecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleDecimalPipe.ctorParameters;\n}\n\nexport class LocalePercentPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?=} digits\n * @return {?}\n */\npublic transform(value: any, defaultLocale: string, digits: string = null): string {\n        if (IntlAPI.HasNumberFormat()) {\n            let /** @type {?} */ localePercent: PercentPipe = new PercentPipe(defaultLocale);\n            return localePercent.transform(value, digits);\n        }\n        // Returns the number without localization.\n        return value;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n    name: 'localePercent',\n    pure: true\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalePercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalePercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalePercentPipe.ctorParameters;\n}\n\nexport class LocaleCurrencyPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} defaultLocale\n * @param {?} currency\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\npublic transform(\n        value: any,\n        defaultLocale: string,\n        currency: string,\n        symbolDisplay: boolean = false,\n        digits: string = null\n    ): string {\n        if (IntlAPI.HasNumberFormat()) {\n            let /** @type {?} */ localeCurrency: CurrencyPipe = new CurrencyPipe(defaultLocale);\n            return localeCurrency.transform(value, currency, symbolDisplay, digits);\n        }\n        // Returns the number & currency without localization.\n        return value + \" \" + currency;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n    name: 'localeCurrency',\n    pure: true\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocaleCurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLocaleCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocaleCurrencyPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}