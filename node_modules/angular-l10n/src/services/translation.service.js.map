{"version":3,"file":"translation.service.js","sourceRoot":"","sources":["../../../src/services/translation.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/observable/merge';\r\n\r\nimport { LocaleService } from './locale.service';\r\nimport { IntlAPI } from './intl-api';\r\nimport { TranslationConfig } from '../models/translation/translation-config';\r\nimport { Config } from '../models/translation/config';\r\nimport { LoadingMode } from '../models/translation/loading-mode';\r\nimport { ServiceState } from '../models/translation/service-state';\n/**\n * Manages the translation data.\n */\nexport class TranslationService {\npublic translationChanged: EventEmitter<string> = new EventEmitter<string>(true);\n/**\n * @return {?}\n */\npublic get configuration(): Config {\r\n        return this._configuration;\r\n    }\npublic serviceState: ServiceState;\nprivate loadingMode: LoadingMode;\nprivate _configuration: Config = new Config();\nprivate language: string;\nprivate translationData: any = {};\n/**\n * @param {?} locale\n * @param {?} http\n */\nconstructor(public locale: LocaleService,\nprivate http: Http) {\r\n        this.serviceState = ServiceState.isWaiting;\r\n\r\n        // When the language changes, loads translation data.\r\n        this.locale.loadTranslation.subscribe(\r\n            () => { this.loadTranslation(); }\r\n        );\r\n    }\n/**\n * Configure the service in the application root module or bootstrap component.\n * @return {?}\n */\npublic AddConfiguration(): TranslationConfig {\r\n        return new TranslationConfig(this);\r\n    }\n/**\n * Call this method after the configuration to initialize the service.\n * @return {?}\n */\npublic init(): void {\r\n        if (this.configuration.providers.length > 0) {\r\n            this.loadingMode = LoadingMode.Async;\r\n        } else {\r\n            this.translationData = this.configuration.translationData;\r\n            this.loadingMode = LoadingMode.Direct;\r\n        }\r\n        this.loadTranslation();\r\n    }\n/**\n * The language of the translation service is updated when the translation data has been loaded.\n * @return {?}\n */\npublic getLanguage(): string {\r\n        return this.language;\r\n    }\n/**\n * @param {?} key\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translate(key: string, args: any = null, lang: string = this.language): string {\r\n        // I18n plural.\r\n        if (/^\\d+\\b/.exec(key)) {\r\n            return this.translateI18nPlural(key, args, lang);\r\n        }\r\n        return this.getValue(key, args, lang);\r\n    }\n/**\n * @param {?} key\n * @param {?=} args\n * @param {?=} lang\n * @return {?}\n */\npublic translateAsync(key: string, args?: any, lang: string = this.language): Observable<string> {\r\n        return Observable.create((observer: Observer<string>) => {\r\n            let /** @type {?} */ value: string = this.translate(key, args, lang);\r\n            observer.next(value);\r\n            observer.complete();\r\n        });\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate translateI18nPlural(key: string, args: any, lang: string): string {\r\n        let /** @type {?} */ keyText: string = key.replace(/^\\d+\\b/, \"\");\r\n        keyText = keyText.trim();\r\n\r\n        let /** @type {?} */ keyNumber: number = parseFloat(key);\r\n        key = key.replace(/^\\d+/, this.translateNumber(keyNumber));\r\n\r\n        return key.replace(keyText, this.getValue(keyText, args, lang));\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate getValue(key: string, args: any, lang: string): string {\r\n        let /** @type {?} */ value: string;\r\n        if (this.translationData[lang]) {\r\n            let /** @type {?} */ translation: any = this.translationData[lang];\r\n\r\n            // Composed key.\r\n            let /** @type {?} */ keys: string[] = key.split(this.configuration.keySeparator);\r\n            do {\r\n                key = keys.shift();\r\n                if (translation[key] && typeof translation[key] === \"object\") {\r\n                    translation = translation[key];\r\n                }\r\n            } while (keys.length > 0);\r\n\r\n            value = translation[key];\r\n        }\r\n        return this.parseValue(key, value, args, lang);\r\n    }\n/**\n * @param {?} keyNumber\n * @return {?}\n */\nprivate translateNumber(keyNumber: number): string {\r\n        if (!isNaN(keyNumber) && IntlAPI.HasNumberFormat()) {\r\n            let /** @type {?} */ localeNumber: string = new Intl.NumberFormat(this.language).format(keyNumber);\r\n            return localeNumber;\r\n        }\r\n        return keyNumber.toString();\r\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate parseValue(key: string, value: string, args: any, lang: string): string {\r\n        if (value == null || value == \"\") {\r\n            return this.handleMissingValue(key, args, lang);\r\n        } else if (args) {\r\n            return this.handleArgs(value, args);\r\n        }\r\n        return value;\r\n    }\n/**\n * @param {?} key\n * @param {?} args\n * @param {?} lang\n * @return {?}\n */\nprivate handleMissingValue(key: string, args: any, lang: string): string {\r\n        if (this.configuration.missingKey != null) {\r\n            return this.translate(this.configuration.missingKey, args, lang);\r\n        } else if (this.configuration.missingValue != null) {\r\n            return this.configuration.missingValue;\r\n        }\r\n        // The same key is returned.\r\n        return key;\r\n    }\n/**\n * @param {?} value\n * @param {?} args\n * @return {?}\n */\nprivate handleArgs(value: string, args: any): string {\r\n        const /** @type {?} */ TEMPLATE_REGEXP: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n        return value.replace(TEMPLATE_REGEXP, (substring: string, parsedKey: string) => {\r\n            let /** @type {?} */ replacer: string = /** @type {?} */(( <string>args[parsedKey]));\r\n            return typeof replacer !== \"undefined\" ? replacer : substring;\r\n        });\r\n    }\n/**\n * @return {?}\n */\nprivate loadTranslation(): void {\r\n        let /** @type {?} */ language: string = !this.configuration.localeAsLanguage\r\n            ? this.locale.getCurrentLanguage()\r\n            : this.locale.getCurrentLanguage()\r\n            + \"-\"\r\n            + this.locale.getCurrentCountry();\r\n\r\n        if (language != null && language != this.language) {\r\n            if (this.loadingMode == LoadingMode.Async) {\r\n                this.getTranslation(language);\r\n            } else {\r\n                this.releaseTranslation(language);\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate getTranslation(language: string): void {\r\n        this.translationData = {};\r\n        this.serviceState = ServiceState.isLoading;\r\n\r\n        let /** @type {?} */ observableSequencesOfTranslationData: Array<Observable<any>> = [];\r\n\r\n        for (let /** @type {?} */ provider of this.configuration.providers) {\r\n            let /** @type {?} */ url: string = provider.prefix;\r\n            if (provider.webAPI) {\r\n                url += language;\r\n            } else {\r\n                url += language + \".\" + provider.dataFormat;\r\n            }\r\n            observableSequencesOfTranslationData.push(this.getTranslationByProvider(url));\r\n        }\r\n\r\n        // Merges all the observable sequences into a single observable sequence.\r\n        Observable.merge(...observableSequencesOfTranslationData).subscribe(\r\n            (data: any) => {\r\n                this.addData(data, language);\r\n            },\r\n            (error: any) => {\r\n                console.error(\"Translation service:\", error);\r\n            },\r\n            () => {\r\n                this.releaseTranslation(language);\r\n            }\r\n        );\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nprivate getTranslationByProvider(url: string): Observable<any> {\r\n        return this.http.get(url)\r\n            .map((res: Response) => res.json());\r\n    }\n/**\n * @param {?} data\n * @param {?} language\n * @return {?}\n */\nprivate addData(data: any, language: string): void {\r\n        this.translationData[language] = typeof this.translationData[language] !== \"undefined\"\r\n            ? this.extend(this.translationData[language], data)\r\n            : data;\r\n    }\n/**\n * @param {...?} args\n * @return {?}\n */\nprivate extend(...args: any[]): any {\r\n        const /** @type {?} */ newObj: any = {};\r\n        for (let /** @type {?} */ obj of args) {\r\n            for (let /** @type {?} */ key in obj) {\r\n                newObj[key] = obj[key];\r\n            }\r\n        }\r\n        return newObj;\r\n    }\n/**\n * @param {?} language\n * @return {?}\n */\nprivate releaseTranslation(language: string): void {\r\n        this.serviceState = ServiceState.isReady;\r\n        this.language = language;\r\n        // Sends an event for the components.\r\n        this.translationChanged.emit(language);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocaleService, },\n{type: Http, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'translationChanged': [{ type: Output },],\n};\n}\n\nfunction TranslationService_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslationService.ctorParameters;\n/** @type {?} */\nTranslationService.propDecorators;\n/** @type {?} */\nTranslationService.prototype.translationChanged;\n/** @type {?} */\nTranslationService.prototype.serviceState;\n/** @type {?} */\nTranslationService.prototype.loadingMode;\n/** @type {?} */\nTranslationService.prototype._configuration;\n/** @type {?} */\nTranslationService.prototype.language;\n/**\n * The translation data: {language: {key: value}}.\n * @type {?}\n */\nTranslationService.prototype.translationData;\n/** @type {?} */\nTranslationService.prototype.locale;\n/** @type {?} */\nTranslationService.prototype.http;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}