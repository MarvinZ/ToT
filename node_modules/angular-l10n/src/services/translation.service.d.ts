import { EventEmitter } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/merge';
import { LocaleService } from './locale.service';
import { TranslationConfig } from '../models/translation/translation-config';
import { Config } from '../models/translation/config';
import { ServiceState } from '../models/translation/service-state';
/**
 * Manages the translation data.
 */
export declare class TranslationService {
    locale: LocaleService;
    private http;
    translationChanged: EventEmitter<string>;
    readonly configuration: Config;
    serviceState: ServiceState;
    private loadingMode;
    private _configuration;
    private language;
    /**
     * The translation data: {language: {key: value}}.
     */
    private translationData;
    constructor(locale: LocaleService, http: Http);
    /**
     * Configure the service in the application root module or bootstrap component.
     */
    AddConfiguration(): TranslationConfig;
    /**
     * Call this method after the configuration to initialize the service.
     */
    init(): void;
    /**
     * The language of the translation service is updated when the translation data has been loaded.
     */
    getLanguage(): string;
    translate(key: string, args?: any, lang?: string): string;
    translateAsync(key: string, args?: any, lang?: string): Observable<string>;
    private translateI18nPlural(key, args, lang);
    private getValue(key, args, lang);
    private translateNumber(keyNumber);
    private parseValue(key, value, args, lang);
    private handleMissingValue(key, args, lang);
    private handleArgs(value, args);
    private loadTranslation();
    private getTranslation(language);
    private getTranslationByProvider(url);
    private addData(data, language);
    private extend(...args);
    private releaseTranslation(language);
}
