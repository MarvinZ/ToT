import { Injectable, EventEmitter, Output } from '@angular/core';
import { LocaleConfig } from '../models/localization/locale-config';
import { Config } from '../models/localization/config';
import { DefaultLocale } from '../models/localization/default-locale';
import { Browser } from '../models/localization/browser';
/**
 * Manages language, default locale & currency.
 */
export var LocaleService = (function () {
    function LocaleService() {
        this.languageCodeChanged = new EventEmitter(true);
        this.defaultLocaleChanged = new EventEmitter(true);
        this.currencyCodeChanged = new EventEmitter(true);
        this.loadTranslation = new EventEmitter(true);
        this._configuration = new Config();
        this.defaultLocale = new DefaultLocale();
        this.browser = new Browser(this);
        LocaleService.referenceCounter++;
    }
    Object.defineProperty(LocaleService.prototype, "configuration", {
        /**
         * @return {?}
         */
        get: function () {
            return this._configuration;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Configure the service in the application root module or bootstrap component.
     * @return {?}
     */
    LocaleService.prototype.AddConfiguration = function () {
        return new LocaleConfig(this);
    };
    /**
     * Call this method after the configuration to initialize the service.
     * @return {?}
     */
    LocaleService.prototype.init = function () {
        this.initStorage();
        if (!!this.configuration.languageCode && !!this.configuration.countryCode) {
            this.initDefaultLocale();
        }
        else if (!!this.configuration.languageCode) {
            this.initLanguage();
        }
        if (!!this.configuration.currencyCode) {
            this.initCurrency();
        }
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getAvailableLanguages = function () {
        return this.configuration.languageCodes.map(function (language) { return language.code; });
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.getLanguageDirection = function (languageCode) {
        var /** @type {?} */ matchedLanguages = this.matchLanguage(languageCode);
        return matchedLanguages[0].direction;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentLanguage = function () {
        return this.defaultLocale.languageCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCountry = function () {
        return this.defaultLocale.countryCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentScript = function () {
        return this.defaultLocale.scriptCode;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentNumberingSystem = function () {
        return this.defaultLocale.numberingSystem;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCalendar = function () {
        return this.defaultLocale.calendar;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getDefaultLocale = function () {
        return this.defaultLocale.value;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.getCurrentCurrency = function () {
        return this.currencyCode;
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.setCurrentLanguage = function (languageCode) {
        if (this.defaultLocale.languageCode != languageCode) {
            this.defaultLocale.build(languageCode);
            this.browser.writeStorage("locale", this.defaultLocale.value);
            this.sendLanguageEvents();
            this.sendTranslationEvents();
        }
    };
    /**
     * @param {?} languageCode
     * @param {?} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleService.prototype.setDefaultLocale = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        if (this.defaultLocale.languageCode != languageCode ||
            this.defaultLocale.countryCode != countryCode ||
            this.defaultLocale.scriptCode != scriptCode ||
            this.defaultLocale.numberingSystem != numberingSystem ||
            this.defaultLocale.calendar != calendar) {
            this.defaultLocale.build(languageCode, countryCode, scriptCode, numberingSystem, calendar);
            this.browser.writeStorage("locale", this.defaultLocale.value);
            this.sendDefaultLocaleEvents();
            this.sendTranslationEvents();
        }
    };
    /**
     * @param {?} currencyCode
     * @return {?}
     */
    LocaleService.prototype.setCurrentCurrency = function (currencyCode) {
        if (this.currencyCode != currencyCode) {
            this.currencyCode = currencyCode;
            this.browser.writeStorage("currency", this.currencyCode);
            this.sendCurrencyEvents();
        }
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initStorage = function () {
        // Avoids overwriting of the storage.
        if (LocaleService.referenceCounter > 1) {
            this.browser.storageIsDisabled = true;
        }
        else {
            this.browser.storageIsDisabled = this.configuration.storageIsDisabled;
        }
        // Tries to retrieve default locale & currency from the browser storage.
        this.defaultLocale.value = this.browser.readStorage("locale");
        this.currencyCode = this.browser.readStorage("currency");
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initLanguage = function () {
        if (this.defaultLocale.languageCode == null) {
            var /** @type {?} */ browserLanguage = this.browser.getBrowserLanguage();
            var /** @type {?} */ matchedLanguages = this.matchLanguage(browserLanguage);
            if (matchedLanguages.length > 0) {
                this.defaultLocale.build(browserLanguage);
            }
            else {
                this.defaultLocale.build(this.configuration.languageCode);
            }
            this.browser.writeStorage("locale", this.defaultLocale.value);
        }
        this.sendLanguageEvents();
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    LocaleService.prototype.matchLanguage = function (languageCode) {
        var /** @type {?} */ matchedLanguages = this.configuration.languageCodes.filter(function (language) {
            return language.code == languageCode;
        });
        return matchedLanguages;
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initDefaultLocale = function () {
        if (this.defaultLocale.value == null) {
            this.defaultLocale.build(this.configuration.languageCode, this.configuration.countryCode, this.configuration.scriptCode, this.configuration.numberingSystem, this.configuration.calendar);
            this.browser.writeStorage("locale", this.defaultLocale.value);
        }
        this.sendDefaultLocaleEvents();
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.initCurrency = function () {
        if (this.currencyCode == null) {
            this.currencyCode = this.configuration.currencyCode;
            this.browser.writeStorage("currency", this.currencyCode);
        }
        this.sendCurrencyEvents();
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendLanguageEvents = function () {
        this.languageCodeChanged.emit(this.defaultLocale.languageCode);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendDefaultLocaleEvents = function () {
        this.defaultLocaleChanged.emit(this.defaultLocale.value);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendCurrencyEvents = function () {
        this.currencyCodeChanged.emit(this.currencyCode);
    };
    /**
     * @return {?}
     */
    LocaleService.prototype.sendTranslationEvents = function () {
        // This event is subscribed by TranslationService to load the translation data.
        this.loadTranslation.emit(null);
    };
    LocaleService.referenceCounter = 0;
    LocaleService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocaleService.ctorParameters = function () { return []; };
    LocaleService.propDecorators = {
        'languageCodeChanged': [{ type: Output },],
        'defaultLocaleChanged': [{ type: Output },],
        'currencyCodeChanged': [{ type: Output },],
        'loadTranslation': [{ type: Output },],
    };
    return LocaleService;
}());
function LocaleService_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleService.referenceCounter;
    /** @type {?} */
    LocaleService.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    LocaleService.ctorParameters;
    /** @type {?} */
    LocaleService.propDecorators;
    /** @type {?} */
    LocaleService.prototype.languageCodeChanged;
    /** @type {?} */
    LocaleService.prototype.defaultLocaleChanged;
    /** @type {?} */
    LocaleService.prototype.currencyCodeChanged;
    /** @type {?} */
    LocaleService.prototype.loadTranslation;
    /** @type {?} */
    LocaleService.prototype._configuration;
    /** @type {?} */
    LocaleService.prototype.defaultLocale;
    /** @type {?} */
    LocaleService.prototype.currencyCode;
    /** @type {?} */
    LocaleService.prototype.browser;
}
//# sourceMappingURL=locale.service.js.map