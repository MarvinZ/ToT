{"version":3,"file":"collator.js","sourceRoot":"","sources":["../../../src/services/collator.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OAEnC,EAAE,UAAU,EAAE,MAAM,iBAAiB;OAErC,EAAE,kBAAkB,EAAE,MAAM,uBAAuB;OACnD,EAAE,OAAO,EAAE,MAAM,YAAY;AACpC;;GAEG;AACH;IACA;;OAEG;IACH,kBAAmB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;IAAI,CAAC;IACvD;;;;;;;;;;OAUG;IACI,0BAAO,GAAd,UACQ,IAAY,EACZ,IAAY,EACZ,SAAkB,EAClB,OAAwD;QAAxD,uBAAwD,GAAxD,YAAiB,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE;QAExD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,CAAC,CAAC;QACb,CAAC;QAED,IAAI,gBAAgB,CAAC,MAAM,GAAW,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvE,IAAI,gBAAgB,CAAC,MAAM,GAAW,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEvE,IAAI,gBAAgB,CAAC,MAAM,GAAW,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,CAAC;QACnG,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC;IACL;;;;;;;;;OASG;IACI,uBAAI,GAAX,UACQ,IAAW,EACX,OAAY,EACZ,KAAqB,EACrB,SAAkB,EAClB,OAAwD;QALhE,iBAoBK;QAjBG,qBAAqB,GAArB,aAAqB;QAErB,uBAAwD,GAAxD,YAAiB,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE;QAExD,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,UAAC,IAAS,EAAE,IAAS;YAC3B,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL;;;;;;;;;OASG;IACI,4BAAS,GAAhB,UACQ,IAAW,EACX,OAAY,EAAE,KAAc,EAC5B,SAAkB,EAClB,OAAwD;QAJhE,iBAUK;QANG,uBAAwD,GAAxD,YAAiB,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE;QAExD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAyB;YAC/C,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;YACnE,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IACL;;;;;;;;;OASG;IACI,yBAAM,GAAb,UACQ,CAAS,EACT,IAAW,EACX,QAAe,EACf,OAAkC;QAJ1C,iBAyBK;QArBG,uBAAkC,GAAlC,YAAiB,KAAK,EAAE,QAAQ,EAAE;QAElC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,gBAAgB,CAAC,MAAM,GAAW,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QACrE,IAAI,gBAAgB,CAAC,QAAQ,GAAkB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAElF,IAAI,gBAAgB,CAAC,OAAO,GAAU,IAAI,CAAC,MAAM,CAAC,UAAC,GAAQ;YACvD,IAAI,gBAAgB,CAAC,KAAK,GAAY,KAAK,CAAC;YAC5C,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChE,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5C,KAAK,GAAG,IAAI,CAAC;oBACb,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACL;;;;;;;;;OASG;IACI,8BAAW,GAAlB,UACQ,CAAS,EACT,IAAW,EACX,QAAe,EACf,OAAkC;QAJ1C,iBAUK;QANG,uBAAkC,GAAlC,YAAiB,KAAK,EAAE,QAAQ,EAAE;QAElC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAyB;YAC/C,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;YACvD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IACL;;;;OAIG;IACK,+BAAY,GAApB,UAAqB,MAAc,EAAE,SAAkB;QAC/C,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,SAAS,CAAC;QACxC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL;;;;;OAKG;IACK,wBAAK,GAAb,UAAc,GAAW,EAAE,CAAS,EAAE,QAAuB;QACrD,IAAI,gBAAgB,CAAC,KAAK,GAAW,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACrE,IAAI,gBAAgB,CAAC,WAAW,GAAW,KAAK,CAAC,MAAM,CAAC;QACxD,IAAI,gBAAgB,CAAC,OAAO,GAAW,CAAC,CAAC,MAAM,CAAC;QAEhD,EAAE,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,IAAI,WAAW,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,gBAAgB,CAAC,KAAK,GAAY,KAAK,CAAC;QAC5C,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5E,IAAI,gBAAgB,CAAC,GAAG,GAAW,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAC5D,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,KAAK,GAAG,IAAI,CAAC;gBACb,KAAK,CAAC;YACV,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEE,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAkB,GAAG;KAC3B,EAF6F,CAE7F,CAAC;IACF,eAAC;AAAD,CAAC,AA5LD,IA4LC;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAGG;IACH,QAAQ,CAAC,cAAc,CAAC;IACxB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/B,CAAC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\n\nimport { TranslationService } from './translation.service';\nimport { IntlAPI } from './intl-api';\n/**\n * Intl.Collator APIs.\n */\nexport class Collator {\n/**\n * @param {?} translation\n */\nconstructor(public translation: TranslationService) { }\n/**\n * Compares two keys by the value of translation according to the current language.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} key1\n * @param {?} key2\n * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'\n * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }\n * @return {?} A negative value if the value of translation of key1 comes before the value of translation of key2;\n *         a positive value if key1 comes after key2;\n *         0 if they are considered equal or Intl.Collator is not supported\n */\npublic compare(\n        key1: string,\n        key2: string,\n        extension?: string,\n        options: any = { usage: 'sort', sensitivity: 'variant' }\n    ): number {\n        if (!IntlAPI.HasCollator()) {\n            return 0;\n        }\n\n        let /** @type {?} */ value1: string = this.translation.translate(key1);\n        let /** @type {?} */ value2: string = this.translation.translate(key2);\n\n        let /** @type {?} */ locale: string = this.addExtension(this.translation.getLanguage(), extension);\n        return new Intl.Collator(locale, options).compare(value1, value2);\n    }\n/**\n * Sorts an array of objects or an array of arrays according to the current language.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} list The array to be sorted\n * @param {?} keyName The column that contains the keys of the values to be ordered\n * @param {?=} order 'asc' or 'desc'. The default value is 'asc'\n * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'\n * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }\n * @return {?} The same sorted list or the same list if Intl.Collator is not supported\n */\npublic sort(\n        list: any[],\n        keyName: any,\n        order: string = \"asc\",\n        extension?: string,\n        options: any = { usage: 'sort', sensitivity: 'variant' }\n    ): any[] {\n        if (!list || !keyName || !IntlAPI.HasCollator()) {\n            return list;\n        }\n\n        list.sort((key1: any, key2: any) => {\n            return this.compare(key1[keyName], key2[keyName], extension, options);\n        });\n\n        if (order == \"desc\") {\n            list.reverse();\n        }\n\n        return list;\n    }\n/**\n * Sorts asynchronously an array of objects or an array of arrays according to the current language.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} list The array to be sorted\n * @param {?} keyName The column that contains the keys of the values to be ordered\n * @param {?=} order 'asc' or 'desc'. The default value is 'asc'\n * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'\n * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }\n * @return {?} An observable of the sorted list or of the same list if Intl.Collator is not supported\n */\npublic sortAsync(\n        list: any[],\n        keyName: any, order?: string,\n        extension?: string,\n        options: any = { usage: 'sort', sensitivity: 'variant' }\n    ): Observable<any[]> {\n        return Observable.create((observer: Observer<any[]>) => {\n            observer.next(this.sort(list, keyName, order, extension, options));\n            observer.complete();\n        });\n    }\n/**\n * Matches a string into an array of objects or an array of arrays\n * according to the current language.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} s The string to search\n * @param {?} list The array in which to search\n * @param {?} keyNames An array that contains the columns to look for\n * @param {?=} options Default is { usage: 'search' }\n * @return {?} A filtered list or the same list if Intl.Collator is not supported\n */\npublic search(\n        s: string,\n        list: any[],\n        keyNames: any[],\n        options: any = { usage: 'search' }\n    ): any[] {\n        if (!list || !keyNames || s == \"\" || s == null || !IntlAPI.HasCollator()) {\n            return list;\n        }\n\n        let /** @type {?} */ locale: string = this.translation.getLanguage();\n        let /** @type {?} */ collator: Intl.Collator = new Intl.Collator(locale, options);\n\n        let /** @type {?} */ matches: any[] = list.filter((key: any) => {\n            let /** @type {?} */ found: boolean = false;\n            for (let /** @type {?} */ i: number = 0; i < keyNames.length; i++) {\n                if (this.match(key[keyNames[i]], s, collator)) {\n                    found = true;\n                    break;\n                }\n            }\n            return found;\n        });\n\n        return matches;\n    }\n/**\n * Matches asynchronously a string into an array of objects or an array of arrays\n * according to the current language.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n * @param {?} s The string to search\n * @param {?} list The array in which to search\n * @param {?} keyNames An array that contains the columns to look for\n * @param {?=} options Default is { usage: 'search' }\n * @return {?} An observable of the filtered list or the same list if Intl.Collator is not supported\n */\npublic searchAsync(\n        s: string,\n        list: any[],\n        keyNames: any[],\n        options: any = { usage: 'search' }\n    ): Observable<any[]> {\n        return Observable.create((observer: Observer<any[]>) => {\n            observer.next(this.search(s, list, keyNames, options));\n            observer.complete();\n        });\n    }\n/**\n * @param {?} locale\n * @param {?=} extension\n * @return {?}\n */\nprivate addExtension(locale: string, extension?: string): string {\n        if (!!extension) {\n            locale = locale + \"-u-\" + extension;\n        }\n        return locale;\n    }\n/**\n * @param {?} key\n * @param {?} s\n * @param {?} collator\n * @return {?}\n */\nprivate match(key: string, s: string, collator: Intl.Collator): boolean {\n        let /** @type {?} */ value: string = this.translation.translate(key);\n        let /** @type {?} */ valueLength: number = value.length;\n        let /** @type {?} */ sLength: number = s.length;\n\n        if (sLength > valueLength) {\n            return false;\n        }\n        if (sLength == valueLength) {\n            return collator.compare(value, s) == 0;\n        }\n\n        let /** @type {?} */ found: boolean = false;\n        for (let /** @type {?} */ i: number = 0; i < valueLength - (sLength - 1); i++) {\n            let /** @type {?} */ str: string = value.substr(i, sLength);\n            if (collator.compare(str, s) == 0) {\n                found = true;\n                break;\n            }\n        }\n        return found;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslationService, },\n];\n}\n\nfunction Collator_tsickle_Closure_declarations() {\n/** @type {?} */\nCollator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCollator.ctorParameters;\n/** @type {?} */\nCollator.prototype.translation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}