import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { TranslationService } from './translation.service';
import { IntlAPI } from './intl-api';
/**
 * Intl.Collator APIs.
 */
export var Collator = (function () {
    /**
     * @param {?} translation
     */
    function Collator(translation) {
        this.translation = translation;
    }
    /**
     * Compares two keys by the value of translation according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} key1
     * @param {?} key2
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} A negative value if the value of translation of key1 comes before the value of translation of key2;
     *         a positive value if key1 comes after key2;
     *         0 if they are considered equal or Intl.Collator is not supported
     */
    Collator.prototype.compare = function (key1, key2, extension, options) {
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        if (!IntlAPI.HasCollator()) {
            return 0;
        }
        var /** @type {?} */ value1 = this.translation.translate(key1);
        var /** @type {?} */ value2 = this.translation.translate(key2);
        var /** @type {?} */ locale = this.addExtension(this.translation.getLanguage(), extension);
        return new Intl.Collator(locale, options).compare(value1, value2);
    };
    /**
     * Sorts an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} The same sorted list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.sort = function (list, keyName, order, extension, options) {
        var _this = this;
        if (order === void 0) { order = "asc"; }
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        if (!list || !keyName || !IntlAPI.HasCollator()) {
            return list;
        }
        list.sort(function (key1, key2) {
            return _this.compare(key1[keyName], key2[keyName], extension, options);
        });
        if (order == "desc") {
            list.reverse();
        }
        return list;
    };
    /**
     * Sorts asynchronously an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} An observable of the sorted list or of the same list if Intl.Collator is not supported
     */
    Collator.prototype.sortAsync = function (list, keyName, order, extension, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'sort', sensitivity: 'variant' }; }
        return Observable.create(function (observer) {
            observer.next(_this.sort(list, keyName, order, extension, options));
            observer.complete();
        });
    };
    /**
     * Matches a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} A filtered list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.search = function (s, list, keyNames, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'search' }; }
        if (!list || !keyNames || s == "" || s == null || !IntlAPI.HasCollator()) {
            return list;
        }
        var /** @type {?} */ locale = this.translation.getLanguage();
        var /** @type {?} */ collator = new Intl.Collator(locale, options);
        var /** @type {?} */ matches = list.filter(function (key) {
            var /** @type {?} */ found = false;
            for (var /** @type {?} */ i = 0; i < keyNames.length; i++) {
                if (_this.match(key[keyNames[i]], s, collator)) {
                    found = true;
                    break;
                }
            }
            return found;
        });
        return matches;
    };
    /**
     * Matches asynchronously a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} An observable of the filtered list or the same list if Intl.Collator is not supported
     */
    Collator.prototype.searchAsync = function (s, list, keyNames, options) {
        var _this = this;
        if (options === void 0) { options = { usage: 'search' }; }
        return Observable.create(function (observer) {
            observer.next(_this.search(s, list, keyNames, options));
            observer.complete();
        });
    };
    /**
     * @param {?} locale
     * @param {?=} extension
     * @return {?}
     */
    Collator.prototype.addExtension = function (locale, extension) {
        if (!!extension) {
            locale = locale + "-u-" + extension;
        }
        return locale;
    };
    /**
     * @param {?} key
     * @param {?} s
     * @param {?} collator
     * @return {?}
     */
    Collator.prototype.match = function (key, s, collator) {
        var /** @type {?} */ value = this.translation.translate(key);
        var /** @type {?} */ valueLength = value.length;
        var /** @type {?} */ sLength = s.length;
        if (sLength > valueLength) {
            return false;
        }
        if (sLength == valueLength) {
            return collator.compare(value, s) == 0;
        }
        var /** @type {?} */ found = false;
        for (var /** @type {?} */ i = 0; i < valueLength - (sLength - 1); i++) {
            var /** @type {?} */ str = value.substr(i, sLength);
            if (collator.compare(str, s) == 0) {
                found = true;
                break;
            }
        }
        return found;
    };
    Collator.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Collator.ctorParameters = function () { return [
        { type: TranslationService, },
    ]; };
    return Collator;
}());
function Collator_tsickle_Closure_declarations() {
    /** @type {?} */
    Collator.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    Collator.ctorParameters;
    /** @type {?} */
    Collator.prototype.translation;
}
//# sourceMappingURL=collator.js.map