{"version":3,"file":"localization.js","sourceRoot":"","sources":["../../../src/services/localization.ts"],"names":[],"mappings":";;;;;OAEO,EAAE,WAAW,EAAE,MAAM,eAAe;AAG3C;;GAEG;AACH;IAAkC,gCAAW;IAG7C;;;;OAIG;IACH,sBACO,MAAqB,EACrB,WAA+B,EAC/B,iBAAqC;QAX5C,iBAoCC;QAvBO,kBAAM,WAAW,EAAE,iBAAiB,CAAC,CAAC;QAJvC,WAAM,GAAN,MAAM,CAAe;QACrB,gBAAW,GAAX,WAAW,CAAoB;QAC/B,sBAAiB,GAAjB,iBAAiB,CAAoB;QAIpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACpD,6FAA6F;QAC7F,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CACtC,UAAC,aAAqB;YAClB,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,oCAAoC;YACpC,EAAE,CAAC,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAAC,KAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;YAAC,CAAC;YAAA,CAAC;QAC3E,CAAC,CACJ,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;QACjD,kFAAkF;QAClF,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,CACrC,UAAC,QAAgB;YACb,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,oCAAoC;YACpC,EAAE,CAAC,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAAC,KAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;YAAC,CAAC;YAAA,CAAC;QAC3E,CAAC,CACJ,CAAC;IACN,CAAC;IAEL,mBAAC;AAAD,CAAC,AApCD,CAAkC,WAAW,GAoC5C;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;IACrC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;IACnC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,iBAAiB,CAAC;AACzC,CAAC","sourcesContent":["import { ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { Translation } from './translation';\r\nimport { LocaleService } from './locale.service';\r\nimport { TranslationService } from './translation.service';\n/**\n * Extend this class in components to provide 'lang', 'defaultLocale' & 'currency' to the translate and locale pipes.\n */\nexport class Localization extends Translation {\npublic defaultLocale: string;\npublic currency: string;\n/**\n * @param {?} locale\n * @param {?} translation\n * @param {?=} changeDetectorRef\n */\nconstructor(\npublic locale: LocaleService,\npublic translation: TranslationService,\npublic changeDetectorRef?: ChangeDetectorRef\r\n    ) {\r\n        super(translation, changeDetectorRef);\r\n\r\n        this.defaultLocale = this.locale.getDefaultLocale();\r\n        // When the default locale changes, subscribes to the event & updates defaultLocale property.\r\n        this.locale.defaultLocaleChanged.subscribe(\r\n            (defaultLocale: string) => {\r\n                this.defaultLocale = defaultLocale;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); };\r\n            }\r\n        );\r\n\r\n        this.currency = this.locale.getCurrentCurrency();\r\n        // When the currency changes, subscribes to the event & updates currency property.\r\n        this.locale.currencyCodeChanged.subscribe(\r\n            (currency: string) => {\r\n                this.currency = currency;\r\n                // OnPush Change Detection strategy.\r\n                if (this.changeDetectorRef) { this.changeDetectorRef.markForCheck(); };\r\n            }\r\n        );\r\n    }\r\n\r\n}\n\nfunction Localization_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalization.prototype.defaultLocale;\n/** @type {?} */\nLocalization.prototype.currency;\n/** @type {?} */\nLocalization.prototype.locale;\n/** @type {?} */\nLocalization.prototype.translation;\n/** @type {?} */\nLocalization.prototype.changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}