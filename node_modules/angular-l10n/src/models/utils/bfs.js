/**
 * Breadth First Search (BFS) algorithm for traversing & searching tree data structure of DOM
explores the neighbor nodes first, before moving to the next level neighbors.
Time complexity: between O(1) and O(|V|^2).
 */
export var BFS = (function () {
    function BFS() {
    }
    /**
     * Target node is a non empty text node.
     * @param {?} rootNode
     * @return {?}
     */
    BFS.prototype.getTargetNode = function (rootNode) {
        return this.walk(rootNode);
    };
    /**
     * @param {?} rootNode
     * @return {?}
     */
    BFS.prototype.walk = function (rootNode) {
        var /** @type {?} */ queue = [];
        var /** @type {?} */ iNode;
        queue.push(rootNode);
        while (queue.length > 0) {
            iNode = queue.shift();
            if (this.isTargetNode(iNode)) {
                return iNode;
            }
            for (var _i = 0, _a = iNode.childNodes; _i < _a.length; _i++) {
                var child = _a[_i];
                queue.push(child);
            }
        }
        return null;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BFS.prototype.isTargetNode = function (node) {
        return typeof node !== "undefined" &&
            node.nodeValue != null &&
            node.nodeValue.trim() != "" &&
            node.nodeType == 3;
    };
    return BFS;
}());
//# sourceMappingURL=bfs.js.map