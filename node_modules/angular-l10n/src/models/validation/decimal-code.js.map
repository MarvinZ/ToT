{"version":3,"file":"decimal-code.js","sourceRoot":"","sources":["../../../../src/models/validation/decimal-code.ts"],"names":[],"mappings":"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","sourcesContent":["import { IntlAPI } from '../../services/intl-api';\r\nimport { NumberCode } from './number-code';\n/**\n * Converts numbers & signs to Unicode according to default locale.\n */\nexport class DecimalCode extends NumberCode {\npublic minusSignCode: string;\npublic decimalSeparatorCode: string;\n/**\n * @param {?} defaultLocale\n */\nconstructor(public defaultLocale: string) {\r\n        super(defaultLocale);\r\n\r\n        this.minusSignCode = this.Unicode(\"-\");\r\n        this.decimalSeparatorCode = this.Unicode(\".\");\r\n\r\n        // Tries to update Unicode for signs according to default locale.\r\n        if (IntlAPI.HasNumberFormat()) {\r\n            let value: number = -0.9; // Reference value.\r\n            let localeValue: string = new Intl.NumberFormat(defaultLocale).format(value);\r\n\r\n            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).\r\n            if (this.Unicode(localeValue.charAt(0)) == \"\\\\u200F\") {\r\n                // Right to left.\r\n                this.minusSignCode = this.Unicode(localeValue.charAt(1));\r\n                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(3));\r\n            } else if (this.Unicode(localeValue.charAt(0)) == this.Unicode(\r\n                new Intl.NumberFormat(defaultLocale).format(0)\r\n            )) {\r\n                // IE & Edge reverse the order.\r\n                this.minusSignCode = this.Unicode(localeValue.charAt(3));\r\n                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(1));\r\n            } else {\r\n                // Left to right.\r\n                this.minusSignCode = this.Unicode(localeValue.charAt(0));\r\n                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(2));\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} s\n * @return {?}\n */\npublic parse(s: string): number {\r\n        let /** @type {?} */ characters: string[] = s.split(\"\");\r\n        let /** @type {?} */ value: string = \"\";\r\n        for (let /** @type {?} */ char of characters) {\r\n            let /** @type {?} */ charCode: string = this.Unicode(char);\r\n            let /** @type {?} */ index: number = this.numbersCodes.indexOf(charCode);\r\n            if (index != -1) {\r\n                value += index;\r\n            } else if (charCode == this.minusSignCode) {\r\n                value += \"-\";\r\n            } else if (charCode == this.decimalSeparatorCode) {\r\n                value += \".\";\r\n            } else { return NaN; }\r\n        }\r\n        return parseFloat(value);\r\n    }\r\n\r\n}\n\nfunction DecimalCode_tsickle_Closure_declarations() {\n/**\n * Unicode for minus sign.\n * @type {?}\n */\nDecimalCode.prototype.minusSignCode;\n/**\n * Unicode for decimal separator.\n * @type {?}\n */\nDecimalCode.prototype.decimalSeparatorCode;\n/** @type {?} */\nDecimalCode.prototype.defaultLocale;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}