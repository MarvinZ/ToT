import { DecimalCode } from './decimal-code';
/**
 * @param {?} obj
 * @return {?}
 */
export function isPresent(obj) {
    return typeof obj !== "undefined" && obj != null;
}
export var RegExpFactory = (function () {
    function RegExpFactory() {
    }
    /**
     * Builds the regular expression for a number according to default locale.
     * @param {?} defaultLocale
     * @param {?} digits
     * @return {?}
     */
    RegExpFactory.prototype.number = function (defaultLocale, digits) {
        var /** @type {?} */ minInt = 1;
        var /** @type {?} */ minFraction = 0;
        var /** @type {?} */ maxFraction = 3;
        if (isPresent(digits)) {
            var /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
            var /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);
            if (isPresent(parts[1])) {
                minInt = parseInt(parts[1]);
            }
            if (isPresent(parts[3])) {
                minFraction = parseInt(parts[3]);
            }
            if (isPresent(parts[5])) {
                maxFraction = parseInt(parts[5]);
            }
        }
        var /** @type {?} */ decimalCode = new DecimalCode(defaultLocale);
        var /** @type {?} */ minusSign = decimalCode.minusSignCode;
        var /** @type {?} */ zero = decimalCode.numbersCodes[0];
        var /** @type {?} */ decimalSeparator = decimalCode.decimalSeparatorCode;
        var /** @type {?} */ nine = decimalCode.numbersCodes[9];
        // Pattern for 1.2-2 digits: /^-?[0-9]{1,}\.[0-9]{2,2}$/
        // Unicode pattern = "^\u002d?[\u0030-\u0039]{1,}\\u002e[\u0030-\u0039]{2,2}$"
        var /** @type {?} */ pattern;
        if (minFraction > 0 && maxFraction > 0) {
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else if (minFraction == 0 && maxFraction > 0) {
            // Decimal separator is optional.
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}\\"
                + decimalSeparator
                + "?[" + zero + "-" + nine
                + "]{" + minFraction + "," + maxFraction
                + "}$";
        }
        else {
            // Integer number.
            pattern = "^"
                + minusSign
                + "?[" + zero + "-" + nine
                + "]{" + minInt + ",}$";
        }
        pattern = decimalCode.UnicodeToChar(pattern);
        var /** @type {?} */ regExp = new RegExp(pattern);
        return regExp;
    };
    return RegExpFactory;
}());
//# sourceMappingURL=regexp-factory.js.map