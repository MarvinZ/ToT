var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { IntlAPI } from '../../services/intl-api';
import { NumberCode } from './number-code';
/**
 * Converts numbers & signs to Unicode according to default locale.
 */
export var DecimalCode = (function (_super) {
    __extends(DecimalCode, _super);
    /**
     * @param {?} defaultLocale
     */
    function DecimalCode(defaultLocale) {
        _super.call(this, defaultLocale);
        this.defaultLocale = defaultLocale;
        this.minusSignCode = this.Unicode("-");
        this.decimalSeparatorCode = this.Unicode(".");
        // Tries to update Unicode for signs according to default locale.
        if (IntlAPI.HasNumberFormat()) {
            var value = -0.9; // Reference value.
            var localeValue = new Intl.NumberFormat(defaultLocale).format(value);
            // Checks Unicode character 'RIGHT-TO-LEFT MARK' (U+200F).
            if (this.Unicode(localeValue.charAt(0)) == "\\u200F") {
                // Right to left.
                this.minusSignCode = this.Unicode(localeValue.charAt(1));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(3));
            }
            else if (this.Unicode(localeValue.charAt(0)) == this.Unicode(new Intl.NumberFormat(defaultLocale).format(0))) {
                // IE & Edge reverse the order.
                this.minusSignCode = this.Unicode(localeValue.charAt(3));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(1));
            }
            else {
                // Left to right.
                this.minusSignCode = this.Unicode(localeValue.charAt(0));
                this.decimalSeparatorCode = this.Unicode(localeValue.charAt(2));
            }
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    DecimalCode.prototype.parse = function (s) {
        var /** @type {?} */ characters = s.split("");
        var /** @type {?} */ value = "";
        for (var _i = 0, characters_1 = characters; _i < characters_1.length; _i++) {
            var char = characters_1[_i];
            var /** @type {?} */ charCode = this.Unicode(char);
            var /** @type {?} */ index = this.numbersCodes.indexOf(charCode);
            if (index != -1) {
                value += index;
            }
            else if (charCode == this.minusSignCode) {
                value += "-";
            }
            else if (charCode == this.decimalSeparatorCode) {
                value += ".";
            }
            else {
                return NaN;
            }
        }
        return parseFloat(value);
    };
    return DecimalCode;
}(NumberCode));
function DecimalCode_tsickle_Closure_declarations() {
    /**
     * Unicode for minus sign.
     * @type {?}
     */
    DecimalCode.prototype.minusSignCode;
    /**
     * Unicode for decimal separator.
     * @type {?}
     */
    DecimalCode.prototype.decimalSeparatorCode;
    /** @type {?} */
    DecimalCode.prototype.defaultLocale;
}
//# sourceMappingURL=decimal-code.js.map