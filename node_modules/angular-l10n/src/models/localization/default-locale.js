var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { DefaultLocaleCodes } from './default-locale-codes';
export var DefaultLocale = (function (_super) {
    __extends(DefaultLocale, _super);
    function DefaultLocale() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(DefaultLocale.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} defaultLocale
         * @return {?}
         */
        set: function (defaultLocale) {
            this._value = defaultLocale;
            this.parseValue();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} languageCode
     * @param {?=} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    DefaultLocale.prototype.build = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        this.languageCode = languageCode;
        this.scriptCode = scriptCode;
        this.countryCode = countryCode;
        this.numberingSystem = numberingSystem;
        this.calendar = calendar;
        var /** @type {?} */ value = [];
        value.push(languageCode);
        value.push(!!scriptCode ? "-" + scriptCode : "");
        value.push(!!countryCode ? "-" + countryCode : "");
        // Adds the 'u' (Unicode) extension.
        value.push((!!numberingSystem || !!calendar) ? "-u" : "");
        value.push(!!numberingSystem ? "-nu-" + numberingSystem : "");
        value.push(!!calendar ? "-ca-" + calendar : "");
        this._value = value.join("");
    };
    /**
     * @return {?}
     */
    DefaultLocale.prototype.parseValue = function () {
        if (!!this.value) {
            var /** @type {?} */ value = this.value;
            // Looks for the 'u' (Unicode) extension.
            var /** @type {?} */ index = value.search("-u");
            if (index != -1) {
                var /** @type {?} */ extensions = value.substring(index + 1).split("-");
                switch (extensions.length) {
                    case 3:
                        if (extensions[1] == "nu") {
                            this.numberingSystem = extensions[2];
                        }
                        else if (extensions[1] == "ca") {
                            this.calendar = extensions[2];
                        }
                        break;
                    default:
                        this.numberingSystem = extensions[2];
                        this.calendar = extensions[4];
                        break;
                }
                // Extracts the codes.
                value = value.substring(0, index);
            }
            var /** @type {?} */ codes = value.split("-");
            switch (codes.length) {
                case 1:
                    this.languageCode = codes[0];
                    break;
                case 2:
                    this.languageCode = codes[0];
                    this.countryCode = codes[1];
                    break;
                default:
                    this.languageCode = codes[0];
                    this.scriptCode = codes[1];
                    this.countryCode = codes[2];
                    break;
            }
        }
    };
    return DefaultLocale;
}(DefaultLocaleCodes));
function DefaultLocale_tsickle_Closure_declarations() {
    /** @type {?} */
    DefaultLocale.prototype._value;
}
//# sourceMappingURL=default-locale.js.map