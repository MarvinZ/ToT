export var LocaleConfig = (function () {
    /**
     * @param {?} locale
     */
    function LocaleConfig(locale) {
        this.locale = locale;
    }
    /**
     * Adds a language to use in the app, specifying the layout direction.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param textDirection Default is ltr (left to right)
     * @param {?} languageCode
     * @param {?=} textDirection
     * @return {?}
     */
    LocaleConfig.prototype.AddLanguage = function (languageCode, textDirection) {
        if (textDirection === void 0) { textDirection = "LTR"; }
        var /** @type {?} */ language = { code: languageCode, direction: textDirection };
        this.locale.configuration.languageCodes.push(language);
        return this;
    };
    /**
     * Adds the languages to use in the app.
    \@param languageCodes Array of ISO 639 two-letter or three-letter codes of the languages
     * @param {?} languageCodes
     * @return {?}
     */
    LocaleConfig.prototype.AddLanguages = function (languageCodes) {
        for (var _i = 0, languageCodes_1 = languageCodes; _i < languageCodes_1.length; _i++) {
            var languageCode = languageCodes_1[_i];
            var /** @type {?} */ language = { code: languageCode, direction: "ltr" };
            this.locale.configuration.languageCodes.push(language);
        }
        return this;
    };
    /**
     * Disables the browser storage for language, default locale & currency.
     * @return {?}
     */
    LocaleConfig.prototype.DisableStorage = function () {
        this.locale.configuration.storageIsDisabled = true;
        return this;
    };
    /**
     * If the cookie expiration is omitted, the cookie becomes a session cookie.
     * @param {?=} days
     * @return {?}
     */
    LocaleConfig.prototype.SetCookieExpiration = function (days) {
        if (days === void 0) { days = null; }
        this.locale.configuration.cookiesExpirationDays = days;
        return this;
    };
    /**
     * Sets browser LocalStorage as default for language, default locale & currency.
     * @return {?}
     */
    LocaleConfig.prototype.UseLocalStorage = function () {
        this.locale.configuration.localStorage = true;
        return this;
    };
    /**
     * Defines the language to be used:
     - tries to get the language from the browser storage;
     - tries to get the language of the browser if it has been added;
     - otherwise gets the parameter language.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
     * @param {?} languageCode
     * @return {?}
     */
    LocaleConfig.prototype.DefineLanguage = function (languageCode) {
        this.locale.configuration.languageCode = languageCode;
        return this;
    };
    /**
     * Defines the default locale to be used, regardless of the browser language.
    \@param languageCode ISO 639 two-letter or three-letter code of the language
    \@param countryCode ISO 3166 two-letter, uppercase code of the country
    \@param scriptCode Optional ISO 15924 four-letter script code
    \@param numberingSystem Optional numbering system
    \@param calendar Optional calendar
     * @param {?} languageCode
     * @param {?} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    LocaleConfig.prototype.DefineDefaultLocale = function (languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        this.locale.configuration.languageCode = languageCode;
        this.locale.configuration.countryCode = countryCode;
        this.locale.configuration.scriptCode = scriptCode;
        this.locale.configuration.numberingSystem = numberingSystem;
        this.locale.configuration.calendar = calendar;
        return this;
    };
    /**
     * Defines the currency to be used.
    \@param defaultCurrency ISO 4217 three-letter code of the currency
     * @param {?} currencyCode
     * @return {?}
     */
    LocaleConfig.prototype.DefineCurrency = function (currencyCode) {
        this.locale.configuration.currencyCode = currencyCode;
        return this;
    };
    return LocaleConfig;
}());
function LocaleConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    LocaleConfig.prototype.locale;
}
//# sourceMappingURL=locale-config.js.map