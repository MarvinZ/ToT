import { LocaleService } from '../../services/locale.service';
export declare class LocaleConfig {
    private locale;
    constructor(locale: LocaleService);
    /**
     * Adds a language to use in the app, specifying the layout direction.
     * @param languageCode ISO 639 two-letter or three-letter code of the language
     * @param textDirection Default is ltr (left to right)
     */
    AddLanguage(languageCode: string, textDirection?: string): LocaleConfig;
    /**
     * Adds the languages to use in the app.
     * @param languageCodes Array of ISO 639 two-letter or three-letter codes of the languages
     */
    AddLanguages(languageCodes: string[]): LocaleConfig;
    /**
     * Disables the browser storage for language, default locale & currency.
     */
    DisableStorage(): LocaleConfig;
    /**
     * If the cookie expiration is omitted, the cookie becomes a session cookie.
     */
    SetCookieExpiration(days?: number): LocaleConfig;
    /**
     * Sets browser LocalStorage as default for language, default locale & currency.
     */
    UseLocalStorage(): LocaleConfig;
    /**
     * Defines the language to be used:
     *  - tries to get the language from the browser storage;
     *  - tries to get the language of the browser if it has been added;
     *  - otherwise gets the parameter language.
     * @param languageCode ISO 639 two-letter or three-letter code of the language
     */
    DefineLanguage(languageCode: string): LocaleConfig;
    /**
     * Defines the default locale to be used, regardless of the browser language.
     * @param languageCode ISO 639 two-letter or three-letter code of the language
     * @param countryCode ISO 3166 two-letter, uppercase code of the country
     * @param scriptCode Optional ISO 15924 four-letter script code
     * @param numberingSystem Optional numbering system
     * @param calendar Optional calendar
     */
    DefineDefaultLocale(languageCode: string, countryCode: string, scriptCode?: string, numberingSystem?: string, calendar?: string): LocaleConfig;
    /**
     * Defines the currency to be used.
     * @param defaultCurrency ISO 4217 three-letter code of the currency
     */
    DefineCurrency(currencyCode: string): LocaleConfig;
}
